
stm32-sd-spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b0  080069b0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b8  080069b8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080069c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000024  080069e4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  080069e4  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014239  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c0  00000000  00000000  0003428d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00036b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00037958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a70  00000000  00000000  00038668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012631  00000000  00000000  0005c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d22ad  00000000  00000000  0006e709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001409b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003920  00000000  00000000  00140a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800685c 	.word	0x0800685c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	0800685c 	.word	0x0800685c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb34 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f8a6 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f982 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f950 	bl	8000784 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004e4:	f000 f910 	bl	8000708 <MX_SPI1_Init>
  MX_FATFS_Init();
 80004e8:	f003 f852 	bl	8003590 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80004ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f0:	f000 fba2 	bl	8000c38 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 80004f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80004f8:	2201      	movs	r2, #1
 80004fa:	4947      	ldr	r1, [pc, #284]	; (8000618 <main+0x14c>)
 80004fc:	4618      	mov	r0, r3
 80004fe:	f005 fad3 	bl	8005aa8 <f_mount>
 8000502:	4603      	mov	r3, r0
 8000504:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 8000508:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800050c:	2b00      	cmp	r3, #0
 800050e:	d000      	beq.n	8000512 <main+0x46>
	//myprintf("f_mount error (%i)\r\n", fres);
	while(1);
 8000510:	e7fe      	b.n	8000510 <main+0x44>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000512:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800051a:	4619      	mov	r1, r3
 800051c:	483e      	ldr	r0, [pc, #248]	; (8000618 <main+0x14c>)
 800051e:	f006 f823 	bl	8006568 <f_getfree>
 8000522:	4603      	mov	r3, r0
 8000524:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 8000528:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800052c:	2b00      	cmp	r3, #0
 800052e:	d000      	beq.n	8000532 <main+0x66>
	//myprintf("f_getfree error (%i)\r\n", fres);
	while(1);
 8000530:	e7fe      	b.n	8000530 <main+0x64>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	3b02      	subs	r3, #2
 800053c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000540:	6812      	ldr	r2, [r2, #0]
 8000542:	8952      	ldrh	r2, [r2, #10]
 8000544:	fb02 f303 	mul.w	r3, r2, r3
 8000548:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
  free_sectors = free_clusters * getFreeFs->csize;
 800054c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	895b      	ldrh	r3, [r3, #10]
 8000554:	461a      	mov	r2, r3
 8000556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	fb03 f302 	mul.w	r3, r3, r2
 8000560:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

  //myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 8000564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000568:	2201      	movs	r2, #1
 800056a:	492c      	ldr	r1, [pc, #176]	; (800061c <main+0x150>)
 800056c:	4618      	mov	r0, r3
 800056e:	f005 fae1 	bl	8005b34 <f_open>
 8000572:	4603      	mov	r3, r0
 8000574:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 8000578:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800057c:	2b00      	cmp	r3, #0
 800057e:	d000      	beq.n	8000582 <main+0xb6>
	//myprintf("f_open error (%i)\r\n");
	while(1);
 8000580:	e7fe      	b.n	8000580 <main+0xb4>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000582:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	211e      	movs	r1, #30
 800058c:	4618      	mov	r0, r3
 800058e:	f006 f8a0 	bl	80066d2 <f_gets>
 8000592:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
  if(rres != 0) {
 8000596:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800059a:	2b00      	cmp	r3, #0
 800059c:	d100      	bne.n	80005a0 <main+0xd4>
	//myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
  } else {
	  while(1);
 800059e:	e7fe      	b.n	800059e <main+0xd2>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 80005a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a4:	4618      	mov	r0, r3
 80005a6:	f005 ffb5 	bl	8006514 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80005aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ae:	221a      	movs	r2, #26
 80005b0:	491b      	ldr	r1, [pc, #108]	; (8000620 <main+0x154>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fabe 	bl	8005b34 <f_open>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fres == FR_OK) {
 80005be:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d000      	beq.n	80005c8 <main+0xfc>
	//myprintf("I was able to open 'write.txt' for writing\r\n");
  } else {
	  while(1);
 80005c6:	e7fe      	b.n	80005c6 <main+0xfa>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4a15      	ldr	r2, [pc, #84]	; (8000624 <main+0x158>)
 80005ce:	461c      	mov	r4, r3
 80005d0:	4615      	mov	r5, r2
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	682b      	ldr	r3, [r5, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	8022      	strh	r2, [r4, #0]
 80005dc:	3402      	adds	r4, #2
 80005de:	0c1b      	lsrs	r3, r3, #16
 80005e0:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	f107 0108 	add.w	r1, r7, #8
 80005e8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80005ec:	2213      	movs	r2, #19
 80005ee:	f005 fd9e 	bl	800612e <f_write>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fres == FR_OK) {
 80005f8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d000      	beq.n	8000602 <main+0x136>
	//myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
  } else {
	while(1);
 8000600:	e7fe      	b.n	8000600 <main+0x134>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000606:	4618      	mov	r0, r3
 8000608:	f005 ff84 	bl	8006514 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800060c:	2200      	movs	r2, #0
 800060e:	4902      	ldr	r1, [pc, #8]	; (8000618 <main+0x14c>)
 8000610:	2000      	movs	r0, #0
 8000612:	f005 fa49 	bl	8005aa8 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0x14a>
 8000618:	08006874 	.word	0x08006874
 800061c:	08006878 	.word	0x08006878
 8000620:	08006884 	.word	0x08006884
 8000624:	08006890 	.word	0x08006890

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0b0      	sub	sp, #192	; 0xc0
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000632:	2244      	movs	r2, #68	; 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f908 	bl	800684c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2268      	movs	r2, #104	; 0x68
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 f8fa 	bl	800684c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 800067c:	230a      	movs	r3, #10
 800067e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000682:	2307      	movs	r3, #7
 8000684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fdcd 	bl	8001238 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a4:	f000 f918 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2303      	movs	r3, #3
 80006ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f9d8 	bl	8001a78 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ce:	f000 f903 	bl	80008d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fbd1 	bl	8001e84 <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e8:	f000 f8f6 	bl	80008d8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f0:	f000 fd4c 	bl	800118c <HAL_PWREx_ControlVoltageScaling>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006fa:	f000 f8ed 	bl	80008d8 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	37c0      	adds	r7, #192	; 0xc0
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_SPI1_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_SPI1_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_SPI1_Init+0x74>)
 8000714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_SPI1_Init+0x74>)
 8000722:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000726:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_SPI1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_SPI1_Init+0x74>)
 8000736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_SPI1_Init+0x74>)
 800073e:	2238      	movs	r2, #56	; 0x38
 8000740:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_SPI1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_SPI1_Init+0x74>)
 8000756:	2207      	movs	r2, #7
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_SPI1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_SPI1_Init+0x74>)
 8000762:	2208      	movs	r2, #8
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_SPI1_Init+0x74>)
 8000768:	f001 feea 	bl	8002540 <HAL_SPI_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f8b1 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000078 	.word	0x20000078
 8000780:	40013000 	.word	0x40013000

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART2_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <MX_USART2_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_USART2_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007c8:	f002 fad0 	bl	8002d6c <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f881 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000dc 	.word	0x200000dc
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b34      	ldr	r3, [pc, #208]	; (80008cc <MX_GPIO_Init+0xe8>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a33      	ldr	r2, [pc, #204]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_GPIO_Init+0xe8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a27      	ldr	r2, [pc, #156]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_GPIO_Init+0xe8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f000 fc6d 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2110      	movs	r1, #16
 800086a:	4819      	ldr	r0, [pc, #100]	; (80008d0 <MX_GPIO_Init+0xec>)
 800086c:	f000 fc68 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <MX_GPIO_Init+0xec>)
 8000886:	f000 fae1 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800088a:	2320      	movs	r3, #32
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f000 fad2 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80008a8:	2310      	movs	r3, #16
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0xec>)
 80008c0:	f000 fac4 	bl	8000e4c <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000800 	.word	0x48000800
 80008d4:	10210000 	.word	0x10210000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	; 0x60
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_SPI_MspInit+0x7c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d128      	bne.n	80009a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_SPI_MspInit+0x80>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_SPI_MspInit+0x80>)
 8000954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_SPI_MspInit+0x80>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_SPI_MspInit+0x80>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_SPI_MspInit+0x80>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_SPI_MspInit+0x80>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800097e:	23c2      	movs	r3, #194	; 0xc2
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800098e:	2305      	movs	r3, #5
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fa56 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40013000 	.word	0x40013000
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0x7c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d128      	bne.n	8000a24 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0x80>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <HAL_UART_MspInit+0x80>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6593      	str	r3, [r2, #88]	; 0x58
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_UART_MspInit+0x80>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0x80>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_UART_MspInit+0x80>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_UART_MspInit+0x80>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f000 fa14 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40021000 	.word	0x40021000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8ba 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <SystemInit+0x5c>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <SystemInit+0x5c>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <SystemInit+0x60>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <SystemInit+0x60>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <SystemInit+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <SystemInit+0x60>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <SystemInit+0x60>)
 8000ab4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ab8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000abc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <SystemInit+0x60>)
 8000ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ac4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <SystemInit+0x60>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <SystemInit+0x60>)
 8000acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SystemInit+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	40021000 	.word	0x40021000

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff ffca 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000af4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000af6:	e003      	b.n	8000b00 <LoopCopyDataInit>

08000af8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000afa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000afc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000afe:	3104      	adds	r1, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b00:	480a      	ldr	r0, [pc, #40]	; (8000b2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b08:	d3f6      	bcc.n	8000af8 <CopyDataInit>
	ldr	r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b0c:	e002      	b.n	8000b14 <LoopFillZerobss>

08000b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b10:	f842 3b04 	str.w	r3, [r2], #4

08000b14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <LoopForever+0x16>)
	cmp	r2, r3
 8000b16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b18:	d3f9      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f005 fe73 	bl	8006804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fcd5 	bl	80004cc <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b24:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000b28:	080069c0 	.word	0x080069c0
	ldr	r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b30:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8000b34:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8000b38:	200005d4 	.word	0x200005d4

08000b3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_Init+0x3c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_Init+0x3c>)
 8000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b56:	2003      	movs	r0, #3
 8000b58:	f000 f944 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 f80f 	bl	8000b80 <HAL_InitTick>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	e001      	b.n	8000b72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6e:	f7ff feb9 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_InitTick+0x6c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d023      	beq.n	8000bdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_InitTick+0x70>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_InitTick+0x6c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f941 	bl	8000e32 <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10f      	bne.n	8000bd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d809      	bhi.n	8000bd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f919 	bl	8000dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_InitTick+0x74>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e007      	b.n	8000be0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e004      	b.n	8000be0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e001      	b.n	8000be0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000160 	.word	0x20000160

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000160 	.word	0x20000160

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff47 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff5c 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffb0 	bl	8000da0 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e154      	b.n	8001106 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8146 	beq.w	8001100 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d00b      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d007      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e88:	2b11      	cmp	r3, #17
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d130      	bne.n	8000ef6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eca:	2201      	movs	r2, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	f003 0201 	and.w	r2, r3, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0xea>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b12      	cmp	r3, #18
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0203 	and.w	r2, r3, #3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80a0 	beq.w	8001100 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <HAL_GPIO_Init+0x2d8>)
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc4:	4a57      	ldr	r2, [pc, #348]	; (8001124 <HAL_GPIO_Init+0x2d8>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6613      	str	r3, [r2, #96]	; 0x60
 8000fcc:	4b55      	ldr	r3, [pc, #340]	; (8001124 <HAL_GPIO_Init+0x2d8>)
 8000fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd8:	4a53      	ldr	r2, [pc, #332]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001002:	d019      	beq.n	8001038 <HAL_GPIO_Init+0x1ec>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a49      	ldr	r2, [pc, #292]	; (800112c <HAL_GPIO_Init+0x2e0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d013      	beq.n	8001034 <HAL_GPIO_Init+0x1e8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a48      	ldr	r2, [pc, #288]	; (8001130 <HAL_GPIO_Init+0x2e4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00d      	beq.n	8001030 <HAL_GPIO_Init+0x1e4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a47      	ldr	r2, [pc, #284]	; (8001134 <HAL_GPIO_Init+0x2e8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x1e0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a46      	ldr	r2, [pc, #280]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_GPIO_Init+0x1dc>
 8001024:	2304      	movs	r3, #4
 8001026:	e008      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001028:	2307      	movs	r3, #7
 800102a:	e006      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 800102c:	2303      	movs	r3, #3
 800102e:	e004      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001030:	2302      	movs	r3, #2
 8001032:	e002      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001038:	2300      	movs	r3, #0
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	f002 0203 	and.w	r2, r2, #3
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	4093      	lsls	r3, r2
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104a:	4937      	ldr	r1, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001058:	4b38      	ldr	r3, [pc, #224]	; (800113c <HAL_GPIO_Init+0x2f0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107c:	4a2f      	ldr	r2, [pc, #188]	; (800113c <HAL_GPIO_Init+0x2f0>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <HAL_GPIO_Init+0x2f0>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a6:	4a25      	ldr	r2, [pc, #148]	; (800113c <HAL_GPIO_Init+0x2f0>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <HAL_GPIO_Init+0x2f0>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_GPIO_Init+0x2f0>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_GPIO_Init+0x2f0>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_GPIO_Init+0x2f0>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3301      	adds	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	f47f aea3 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000
 800112c:	48000400 	.word	0x48000400
 8001130:	48000800 	.word	0x48000800
 8001134:	48000c00 	.word	0x48000c00
 8001138:	48001000 	.word	0x48001000
 800113c:	40010400 	.word	0x40010400

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800115c:	e002      	b.n	8001164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_PWREx_GetVoltageRange+0x18>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119a:	d130      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a8:	d038      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2232      	movs	r2, #50	; 0x32
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	3301      	adds	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d0:	e002      	b.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e4:	d102      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f2      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d110      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e00f      	b.n	800121e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120a:	d007      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40007000 	.word	0x40007000
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83

08001238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f000 bc11 	b.w	8001a6e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800124c:	4ba0      	ldr	r3, [pc, #640]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001256:	4b9e      	ldr	r3, [pc, #632]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80e4 	beq.w	8001436 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_RCC_OscConfig+0x4c>
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2b0c      	cmp	r3, #12
 8001278:	f040 808b 	bne.w	8001392 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b01      	cmp	r3, #1
 8001280:	f040 8087 	bne.w	8001392 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001284:	4b92      	ldr	r3, [pc, #584]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_OscConfig+0x64>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e3e8      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1a      	ldr	r2, [r3, #32]
 80012a0:	4b8b      	ldr	r3, [pc, #556]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <HAL_RCC_OscConfig+0x7e>
 80012ac:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b4:	e005      	b.n	80012c2 <HAL_RCC_OscConfig+0x8a>
 80012b6:	4b86      	ldr	r3, [pc, #536]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80012b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d223      	bcs.n	800130e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fd7a 	bl	8001dc4 <RCC_SetFlashLatencyFromMSIRange>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e3c9      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012da:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7c      	ldr	r2, [pc, #496]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b7a      	ldr	r3, [pc, #488]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4977      	ldr	r1, [pc, #476]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f8:	4b75      	ldr	r3, [pc, #468]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	4972      	ldr	r1, [pc, #456]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
 800130c:	e025      	b.n	800135a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6f      	ldr	r2, [pc, #444]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	496a      	ldr	r1, [pc, #424]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132c:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	4965      	ldr	r1, [pc, #404]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fd3a 	bl	8001dc4 <RCC_SetFlashLatencyFromMSIRange>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e389      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800135a:	f000 fc6f 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 800135e:	4602      	mov	r2, r0
 8001360:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	495a      	ldr	r1, [pc, #360]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 800136c:	5ccb      	ldrb	r3, [r1, r3]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	fa22 f303 	lsr.w	r3, r2, r3
 8001376:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_RCC_OscConfig+0x2a0>)
 8001378:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800137a:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_RCC_OscConfig+0x2a4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fbfe 	bl	8000b80 <HAL_InitTick>
 8001384:	4603      	mov	r3, r0
 8001386:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d052      	beq.n	8001434 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	e36d      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d032      	beq.n	8001400 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc3b 	bl	8000c20 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc37 	bl	8000c20 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e356      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c0:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013cc:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a3f      	ldr	r2, [pc, #252]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	4935      	ldr	r1, [pc, #212]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
 80013fe:	e01a      	b.n	8001436 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140c:	f7ff fc08 	bl	8000c20 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001414:	f7ff fc04 	bl	8000c20 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e323      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1dc>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001434:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d073      	beq.n	800152a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	2b08      	cmp	r3, #8
 8001446:	d005      	beq.n	8001454 <HAL_RCC_OscConfig+0x21c>
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b0c      	cmp	r3, #12
 800144c:	d10e      	bne.n	800146c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d10b      	bne.n	800146c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d063      	beq.n	8001528 <HAL_RCC_OscConfig+0x2f0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d15f      	bne.n	8001528 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e300      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001474:	d106      	bne.n	8001484 <HAL_RCC_OscConfig+0x24c>
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e01d      	b.n	80014c0 <HAL_RCC_OscConfig+0x288>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x270>
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 8001494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0x288>
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_RCC_OscConfig+0x298>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01b      	beq.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fbaa 	bl	8000c20 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ce:	e010      	b.n	80014f2 <HAL_RCC_OscConfig+0x2ba>
 80014d0:	40021000 	.word	0x40021000
 80014d4:	080068e8 	.word	0x080068e8
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb9e 	bl	8000c20 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e2bd      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f2:	4baf      	ldr	r3, [pc, #700]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2a8>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fb8e 	bl	8000c20 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fb8a 	bl	8000c20 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e2a9      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151a:	4ba5      	ldr	r3, [pc, #660]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d0>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d060      	beq.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x310>
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d119      	bne.n	8001576 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d116      	bne.n	8001576 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	4b99      	ldr	r3, [pc, #612]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x328>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e286      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b93      	ldr	r3, [pc, #588]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	4990      	ldr	r1, [pc, #576]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001574:	e040      	b.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d023      	beq.n	80015c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157e:	4b8c      	ldr	r3, [pc, #560]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a8b      	ldr	r2, [pc, #556]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fb49 	bl	8000c20 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fb45 	bl	8000c20 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e264      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a4:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b7f      	ldr	r3, [pc, #508]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	497c      	ldr	r1, [pc, #496]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e018      	b.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b7a      	ldr	r3, [pc, #488]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a79      	ldr	r2, [pc, #484]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80015cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb25 	bl	8000c20 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fb21 	bl	8000c20 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e240      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ec:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d03c      	beq.n	800167e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160c:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001612:	4a67      	ldr	r2, [pc, #412]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fb00 	bl	8000c20 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fafc 	bl	8000c20 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e21b      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001636:	4b5e      	ldr	r3, [pc, #376]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ef      	beq.n	8001624 <HAL_RCC_OscConfig+0x3ec>
 8001644:	e01b      	b.n	800167e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164c:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff fae3 	bl	8000c20 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fadf 	bl	8000c20 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1fe      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ef      	bne.n	800165e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80a6 	beq.w	80017d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001690:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10d      	bne.n	80016b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6593      	str	r3, [r2, #88]	; 0x58
 80016a8:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b8:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <HAL_RCC_OscConfig+0x57c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d118      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c4:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_RCC_OscConfig+0x57c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a3a      	ldr	r2, [pc, #232]	; (80017b4 <HAL_RCC_OscConfig+0x57c>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d0:	f7ff faa6 	bl	8000c20 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff faa2 	bl	8000c20 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1c1      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_RCC_OscConfig+0x57c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_RCC_OscConfig+0x4d8>
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800170e:	e024      	b.n	800175a <HAL_RCC_OscConfig+0x522>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d110      	bne.n	800173a <HAL_RCC_OscConfig+0x502>
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001738:	e00f      	b.n	800175a <HAL_RCC_OscConfig+0x522>
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800173c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 800174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001750:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fa5d 	bl	8000c20 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fa59 	bl	8000c20 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e176      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x578>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0ed      	beq.n	800176a <HAL_RCC_OscConfig+0x532>
 800178e:	e01a      	b.n	80017c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fa46 	bl	8000c20 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001796:	e00f      	b.n	80017b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7ff fa42 	bl	8000c20 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d906      	bls.n	80017b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e15f      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b8:	4baa      	ldr	r3, [pc, #680]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1e8      	bne.n	8001798 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017cc:	4ba5      	ldr	r3, [pc, #660]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	4aa4      	ldr	r2, [pc, #656]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80017d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d03c      	beq.n	800185e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01c      	beq.n	8001826 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017ec:	4b9d      	ldr	r3, [pc, #628]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80017ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f2:	4a9c      	ldr	r2, [pc, #624]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa10 	bl	8000c20 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001804:	f7ff fa0c 	bl	8000c20 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e12b      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001816:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0ef      	beq.n	8001804 <HAL_RCC_OscConfig+0x5cc>
 8001824:	e01b      	b.n	800185e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001826:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800182c:	4a8d      	ldr	r2, [pc, #564]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff f9f3 	bl	8000c20 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183e:	f7ff f9ef 	bl	8000c20 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e10e      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001850:	4b84      	ldr	r3, [pc, #528]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ef      	bne.n	800183e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8102 	beq.w	8001a6c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	2b02      	cmp	r3, #2
 800186e:	f040 80c5 	bne.w	80019fc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001872:	4b7c      	ldr	r3, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0203 	and.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	429a      	cmp	r2, r3
 8001884:	d12c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	3b01      	subs	r3, #1
 8001892:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d123      	bne.n	80018e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d11b      	bne.n	80018e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d113      	bne.n	80018e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	3b01      	subs	r3, #1
 80018c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d109      	bne.n	80018e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	3b01      	subs	r3, #1
 80018da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d067      	beq.n	80019b0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d062      	beq.n	80019ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0bb      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5a      	ldr	r2, [pc, #360]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80018fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001900:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001902:	f7ff f98d 	bl	8000c20 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff f989 	bl	8000c20 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0a8      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001928:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <HAL_RCC_OscConfig+0x830>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001938:	3a01      	subs	r2, #1
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001942:	0212      	lsls	r2, r2, #8
 8001944:	4311      	orrs	r1, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800194a:	0852      	lsrs	r2, r2, #1
 800194c:	3a01      	subs	r2, #1
 800194e:	0552      	lsls	r2, r2, #21
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001956:	0852      	lsrs	r2, r2, #1
 8001958:	3a01      	subs	r2, #1
 800195a:	0652      	lsls	r2, r2, #25
 800195c:	4311      	orrs	r1, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001962:	06d2      	lsls	r2, r2, #27
 8001964:	430a      	orrs	r2, r1
 8001966:	493f      	ldr	r1, [pc, #252]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001968:	4313      	orrs	r3, r2
 800196a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a3c      	ldr	r2, [pc, #240]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a39      	ldr	r2, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001984:	f7ff f94c 	bl	8000c20 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f948 	bl	8000c20 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e067      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019aa:	e05f      	b.n	8001a6c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e05e      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d157      	bne.n	8001a6c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a28      	ldr	r2, [pc, #160]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d4:	f7ff f924 	bl	8000c20 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f920 	bl	8000c20 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e03f      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x7a4>
 80019fa:	e037      	b.n	8001a6c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d02d      	beq.n	8001a5e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001a20:	f023 0303 	bic.w	r3, r3, #3
 8001a24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001a2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff f8f3 	bl	8000c20 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff f8ef 	bl	8000c20 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e00e      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <HAL_RCC_OscConfig+0x82c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x806>
 8001a5c:	e006      	b.n	8001a6c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e005      	b.n	8001a6e <HAL_RCC_OscConfig+0x836>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop

08001a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0c8      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b66      	ldr	r3, [pc, #408]	; (8001c28 <HAL_RCC_ClockConfig+0x1b0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0207 	bic.w	r2, r3, #7
 8001aa2:	4961      	ldr	r1, [pc, #388]	; (8001c28 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_RCC_ClockConfig+0x1b0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b0      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d04c      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad0:	4b56      	ldr	r3, [pc, #344]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d121      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e09e      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d115      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e092      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b00:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e086      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b10:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e07e      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b20:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 0203 	bic.w	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	493f      	ldr	r1, [pc, #252]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b32:	f7ff f875 	bl	8000c20 <HAL_GetTick>
 8001b36:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3a:	f7ff f871 	bl	8000c20 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e066      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 020c 	and.w	r2, r3, #12
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d1eb      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	492c      	ldr	r1, [pc, #176]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <HAL_RCC_ClockConfig+0x1b0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d210      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_RCC_ClockConfig+0x1b0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4924      	ldr	r1, [pc, #144]	; (8001c28 <HAL_RCC_ClockConfig+0x1b0>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e036      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4918      	ldr	r1, [pc, #96]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4910      	ldr	r1, [pc, #64]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bee:	f000 f825 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_RCC_ClockConfig+0x1b4>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	490c      	ldr	r1, [pc, #48]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe ffb4 	bl	8000b80 <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	080068e8 	.word	0x080068e8
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x34>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d121      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d11e      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c7c:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c98:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	e004      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d134      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d003      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ce0:	e005      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce4:	617b      	str	r3, [r7, #20]
      break;
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cea:	617b      	str	r3, [r7, #20]
      break;
 8001cec:	e002      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	617b      	str	r3, [r7, #20]
      break;
 8001cf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	3301      	adds	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	fb02 f203 	mul.w	r2, r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	0e5b      	lsrs	r3, r3, #25
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	3301      	adds	r3, #1
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d34:	69bb      	ldr	r3, [r7, #24]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08006900 	.word	0x08006900
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	007a1200 	.word	0x007a1200

08001d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4904      	ldr	r1, [pc, #16]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	080068f8 	.word	0x080068f8

08001d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d9c:	f7ff ffda 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0adb      	lsrs	r3, r3, #11
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4904      	ldr	r1, [pc, #16]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	080068f8 	.word	0x080068f8

08001dc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ddc:	f7ff f9c8 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001de0:	6178      	str	r0, [r7, #20]
 8001de2:	e014      	b.n	8001e0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6593      	str	r3, [r2, #88]	; 0x58
 8001df0:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dfc:	f7ff f9b8 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001e00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e02:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e14:	d10b      	bne.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b80      	cmp	r3, #128	; 0x80
 8001e1a:	d919      	bls.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e20:	d902      	bls.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e22:	2302      	movs	r3, #2
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e013      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e28:	2301      	movs	r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	e010      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b80      	cmp	r3, #128	; 0x80
 8001e32:	d902      	bls.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e34:	2303      	movs	r3, #3
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e00a      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d102      	bne.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e40:	2302      	movs	r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e004      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b70      	cmp	r3, #112	; 0x70
 8001e4a:	d101      	bne.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 0207 	bic.w	r2, r3, #7
 8001e58:	4909      	ldr	r1, [pc, #36]	; (8001e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40022000 	.word	0x40022000

08001e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e90:	2300      	movs	r3, #0
 8001e92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d031      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ea8:	d01a      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001eaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eae:	d814      	bhi.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eb8:	d10f      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec6:	e00c      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fa44 	bl	800235c <RCCEx_PLLSAI1_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ed8:	e003      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	74fb      	strb	r3, [r7, #19]
      break;
 8001ede:	e000      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ee8:	4b51      	ldr	r3, [pc, #324]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	494e      	ldr	r1, [pc, #312]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001efe:	e001      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 809e 	beq.w	800204e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f16:	4b46      	ldr	r3, [pc, #280]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	4a3f      	ldr	r2, [pc, #252]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	6593      	str	r3, [r2, #88]	; 0x58
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f48:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a39      	ldr	r2, [pc, #228]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fe64 	bl	8000c20 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7fe fe60 	bl	8000c20 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d902      	bls.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f6e:	e005      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ef      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d15a      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01e      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d019      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fca:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d016      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fe20 	bl	8000c20 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fe1c 	bl	8000c20 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d902      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	74fb      	strb	r3, [r7, #19]
            break;
 8001ffa:	e006      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ec      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800200a:	7cfb      	ldrb	r3, [r7, #19]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10b      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800201e:	4904      	ldr	r1, [pc, #16]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002026:	e009      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	74bb      	strb	r3, [r7, #18]
 800202c:	e006      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800203c:	7c7b      	ldrb	r3, [r7, #17]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b9e      	ldr	r3, [pc, #632]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a9d      	ldr	r2, [pc, #628]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205a:	4b98      	ldr	r3, [pc, #608]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f023 0203 	bic.w	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4994      	ldr	r1, [pc, #592]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207c:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f023 020c 	bic.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	498c      	ldr	r1, [pc, #560]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800209e:	4b87      	ldr	r3, [pc, #540]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	4983      	ldr	r1, [pc, #524]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020c0:	4b7e      	ldr	r3, [pc, #504]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	497b      	ldr	r1, [pc, #492]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4972      	ldr	r1, [pc, #456]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002104:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	496a      	ldr	r1, [pc, #424]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	4961      	ldr	r1, [pc, #388]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002148:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	4959      	ldr	r1, [pc, #356]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800216a:	4b54      	ldr	r3, [pc, #336]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	4950      	ldr	r1, [pc, #320]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800218c:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	4948      	ldr	r1, [pc, #288]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021b4:	f023 0203 	bic.w	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	493f      	ldr	r1, [pc, #252]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d028      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021de:	4937      	ldr	r1, [pc, #220]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ee:	d106      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
 80021fc:	e011      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002206:	d10c      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f8a4 	bl	800235c <RCCEx_PLLSAI1_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	491f      	ldr	r1, [pc, #124]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224c:	d106      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002258:	60d3      	str	r3, [r2, #12]
 800225a:	e011      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002264:	d10c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f875 	bl	800235c <RCCEx_PLLSAI1_Config>
 8002272:	4603      	mov	r3, r0
 8002274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02b      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022aa:	d109      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b6:	60d3      	str	r3, [r2, #12]
 80022b8:	e014      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f843 	bl	800235c <RCCEx_PLLSAI1_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022da:	7cfb      	ldrb	r3, [r7, #19]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	4916      	ldr	r1, [pc, #88]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800230e:	d10c      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f820 	bl	800235c <RCCEx_PLLSAI1_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800234c:	7cbb      	ldrb	r3, [r7, #18]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000

0800235c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800236a:	4b74      	ldr	r3, [pc, #464]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d018      	beq.n	80023a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002376:	4b71      	ldr	r3, [pc, #452]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0203 	and.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d10d      	bne.n	80023a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
       ||
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800238e:	4b6b      	ldr	r3, [pc, #428]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
       ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d047      	beq.n	8002432 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e044      	b.n	8002432 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d018      	beq.n	80023e2 <RCCEx_PLLSAI1_Config+0x86>
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d825      	bhi.n	8002400 <RCCEx_PLLSAI1_Config+0xa4>
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d002      	beq.n	80023be <RCCEx_PLLSAI1_Config+0x62>
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d009      	beq.n	80023d0 <RCCEx_PLLSAI1_Config+0x74>
 80023bc:	e020      	b.n	8002400 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023be:	4b5f      	ldr	r3, [pc, #380]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11d      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e01a      	b.n	8002406 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023d0:	4b5a      	ldr	r3, [pc, #360]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d116      	bne.n	800240a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e013      	b.n	800240a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023e2:	4b56      	ldr	r3, [pc, #344]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ee:	4b53      	ldr	r3, [pc, #332]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023fe:	e006      	b.n	800240e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e004      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002406:	bf00      	nop
 8002408:	e002      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240a:	bf00      	nop
 800240c:	e000      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10d      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002416:	4b49      	ldr	r3, [pc, #292]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	430b      	orrs	r3, r1
 800242c:	4943      	ldr	r1, [pc, #268]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d17c      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002438:	4b40      	ldr	r3, [pc, #256]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3f      	ldr	r2, [pc, #252]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800243e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe fbec 	bl	8000c20 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800244a:	e009      	b.n	8002460 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800244c:	f7fe fbe8 	bl	8000c20 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d902      	bls.n	8002460 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	73fb      	strb	r3, [r7, #15]
        break;
 800245e:	e005      	b.n	800246c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ef      	bne.n	800244c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d15f      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d110      	bne.n	800249a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002478:	4b30      	ldr	r3, [pc, #192]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002480:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6892      	ldr	r2, [r2, #8]
 8002488:	0211      	lsls	r1, r2, #8
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68d2      	ldr	r2, [r2, #12]
 800248e:	06d2      	lsls	r2, r2, #27
 8002490:	430a      	orrs	r2, r1
 8002492:	492a      	ldr	r1, [pc, #168]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	610b      	str	r3, [r1, #16]
 8002498:	e027      	b.n	80024ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d112      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6892      	ldr	r2, [r2, #8]
 80024b0:	0211      	lsls	r1, r2, #8
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6912      	ldr	r2, [r2, #16]
 80024b6:	0852      	lsrs	r2, r2, #1
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0552      	lsls	r2, r2, #21
 80024bc:	430a      	orrs	r2, r1
 80024be:	491f      	ldr	r1, [pc, #124]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	610b      	str	r3, [r1, #16]
 80024c4:	e011      	b.n	80024ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6892      	ldr	r2, [r2, #8]
 80024d6:	0211      	lsls	r1, r2, #8
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6952      	ldr	r2, [r2, #20]
 80024dc:	0852      	lsrs	r2, r2, #1
 80024de:	3a01      	subs	r2, #1
 80024e0:	0652      	lsls	r2, r2, #25
 80024e2:	430a      	orrs	r2, r1
 80024e4:	4915      	ldr	r1, [pc, #84]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe fb93 	bl	8000c20 <HAL_GetTick>
 80024fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024fc:	e009      	b.n	8002512 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024fe:	f7fe fb8f 	bl	8000c20 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d902      	bls.n	8002512 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	73fb      	strb	r3, [r7, #15]
          break;
 8002510:	e005      	b.n	800251e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ef      	beq.n	80024fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4903      	ldr	r1, [pc, #12]	; (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e095      	b.n	800267e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2b00      	cmp	r3, #0
 8002558:	d108      	bne.n	800256c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002562:	d009      	beq.n	8002578 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
 800256a:	e005      	b.n	8002578 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe f9ca 	bl	800092c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025b8:	d902      	bls.n	80025c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e002      	b.n	80025c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80025ce:	d007      	beq.n	80025e0 <HAL_SPI_Init+0xa0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025d8:	d002      	beq.n	80025e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	ea42 0103 	orr.w	r1, r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	f003 0204 	and.w	r2, r3, #4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b08a      	sub	sp, #40	; 0x28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002694:	2301      	movs	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x26>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e1fb      	b.n	8002aa4 <HAL_SPI_TransmitReceive+0x41e>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026b4:	f7fe fab4 	bl	8000c20 <HAL_GetTick>
 80026b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026d0:	7efb      	ldrb	r3, [r7, #27]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d00e      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x6e>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026dc:	d106      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x66>
 80026e6:	7efb      	ldrb	r3, [r7, #27]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d003      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
 80026ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80026f2:	e1cd      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x80>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x80>
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800270c:	e1c0      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b04      	cmp	r3, #4
 8002718:	d003      	beq.n	8002722 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2205      	movs	r2, #5
 800271e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	887a      	ldrh	r2, [r7, #2]
 8002732:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	887a      	ldrh	r2, [r7, #2]
 800274e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002764:	d802      	bhi.n	800276c <HAL_SPI_TransmitReceive+0xe6>
 8002766:	8a3b      	ldrh	r3, [r7, #16]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d908      	bls.n	800277e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	e007      	b.n	800278e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800278c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d007      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027b4:	d97c      	bls.n	80028b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x13e>
 80027be:	8a7b      	ldrh	r3, [r7, #18]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d169      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	1c9a      	adds	r2, r3, #2
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e8:	e056      	b.n	8002898 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d11b      	bne.n	8002830 <HAL_SPI_TransmitReceive+0x1aa>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_SPI_TransmitReceive+0x1aa>
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	2b01      	cmp	r3, #1
 8002806:	d113      	bne.n	8002830 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	881a      	ldrh	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	1c9a      	adds	r2, r3, #2
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b01      	cmp	r3, #1
 800283c:	d11c      	bne.n	8002878 <HAL_SPI_TransmitReceive+0x1f2>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	b292      	uxth	r2, r2
 8002856:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	1c9a      	adds	r2, r3, #2
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002874:	2301      	movs	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002878:	f7fe f9d2 	bl	8000c20 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002884:	429a      	cmp	r2, r3
 8002886:	d807      	bhi.n	8002898 <HAL_SPI_TransmitReceive+0x212>
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288e:	d003      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002896:	e0fb      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1a3      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x164>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d19d      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x164>
 80028ae:	e0df      	b.n	8002a70 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_SPI_TransmitReceive+0x23a>
 80028b8:	8a7b      	ldrh	r3, [r7, #18]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	f040 80cb 	bne.w	8002a56 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d912      	bls.n	80028f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	1c9a      	adds	r2, r3, #2
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b02      	subs	r3, #2
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028ee:	e0b2      	b.n	8002a56 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	330c      	adds	r3, #12
 80028fa:	7812      	ldrb	r2, [r2, #0]
 80028fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002916:	e09e      	b.n	8002a56 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d134      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x30a>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02f      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x30a>
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	2b01      	cmp	r3, #1
 8002934:	d12c      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d912      	bls.n	8002966 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	1c9a      	adds	r2, r3, #2
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b02      	subs	r3, #2
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002964:	e012      	b.n	800298c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d148      	bne.n	8002a30 <HAL_SPI_TransmitReceive+0x3aa>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d042      	beq.n	8002a30 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d923      	bls.n	80029fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	b292      	uxth	r2, r2
 80029c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	1c9a      	adds	r2, r3, #2
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b02      	subs	r3, #2
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d81f      	bhi.n	8002a2c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	e016      	b.n	8002a2c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f103 020c 	add.w	r2, r3, #12
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a30:	f7fe f8f6 	bl	8000c20 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d803      	bhi.n	8002a48 <HAL_SPI_TransmitReceive+0x3c2>
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d102      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x3c8>
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a54:	e01c      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f af5b 	bne.w	8002918 <HAL_SPI_TransmitReceive+0x292>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f47f af54 	bne.w	8002918 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f933 	bl	8002ce0 <SPI_EndRxTxTransaction>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60
 8002a8c:	e000      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002abc:	f7fe f8b0 	bl	8000c20 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002acc:	f7fe f8a8 	bl	8000c20 <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	015b      	lsls	r3, r3, #5
 8002ad8:	0d1b      	lsrs	r3, r3, #20
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae2:	e054      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d050      	beq.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aec:	f7fe f898 	bl	8000c20 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d902      	bls.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13d      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d111      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b24:	d004      	beq.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d107      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b48:	d10f      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e017      	b.n	8002bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d19b      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000000 	.word	0x20000000

08002bbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bca:	f7fe f829 	bl	8000c20 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bda:	f7fe f821 	bl	8000c20 <HAL_GetTick>
 8002bde:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002be0:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00da      	lsls	r2, r3, #3
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	0d1b      	lsrs	r3, r3, #20
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bf8:	e062      	b.n	8002cc0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c00:	d109      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002c14:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d050      	beq.n	8002cc0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c1e:	f7fd ffff 	bl	8000c20 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d902      	bls.n	8002c34 <SPI_WaitFifoStateUntilTimeout+0x78>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13d      	bne.n	8002cb0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c4c:	d111      	bne.n	8002c72 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c56:	d004      	beq.n	8002c62 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c60:	d107      	bne.n	8002c72 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7a:	d10f      	bne.n	8002c9c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e010      	b.n	8002cd2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d194      	bne.n	8002bfa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff ff5f 	bl	8002bbc <SPI_WaitFifoStateUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e027      	b.n	8002d64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fec4 	bl	8002aac <SPI_WaitFlagStateUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e014      	b.n	8002d64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff ff38 	bl	8002bbc <SPI_WaitFifoStateUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e000      	b.n	8002d64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e040      	b.n	8002e00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd fe0e 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f82c 	bl	8002e08 <UART_SetConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e022      	b.n	8002e00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa7c 	bl	80032c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fb03 	bl	8003404 <UART_CheckIdleState>
 8002dfe:	4603      	mov	r3, r0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4ba4      	ldr	r3, [pc, #656]	; (80030c4 <UART_SetConfig+0x2bc>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	69f9      	ldr	r1, [r7, #28]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a99      	ldr	r2, [pc, #612]	; (80030c8 <UART_SetConfig+0x2c0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a90      	ldr	r2, [pc, #576]	; (80030cc <UART_SetConfig+0x2c4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d121      	bne.n	8002ed2 <UART_SetConfig+0xca>
 8002e8e:	4b90      	ldr	r3, [pc, #576]	; (80030d0 <UART_SetConfig+0x2c8>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d817      	bhi.n	8002ecc <UART_SetConfig+0xc4>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <UART_SetConfig+0x9c>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ec1 	.word	0x08002ec1
 8002eac:	08002ebb 	.word	0x08002ebb
 8002eb0:	08002ec7 	.word	0x08002ec7
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	76fb      	strb	r3, [r7, #27]
 8002eb8:	e0bc      	b.n	8003034 <UART_SetConfig+0x22c>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	76fb      	strb	r3, [r7, #27]
 8002ebe:	e0b9      	b.n	8003034 <UART_SetConfig+0x22c>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	76fb      	strb	r3, [r7, #27]
 8002ec4:	e0b6      	b.n	8003034 <UART_SetConfig+0x22c>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	76fb      	strb	r3, [r7, #27]
 8002eca:	e0b3      	b.n	8003034 <UART_SetConfig+0x22c>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	76fb      	strb	r3, [r7, #27]
 8002ed0:	e0b0      	b.n	8003034 <UART_SetConfig+0x22c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7f      	ldr	r2, [pc, #508]	; (80030d4 <UART_SetConfig+0x2cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d132      	bne.n	8002f42 <UART_SetConfig+0x13a>
 8002edc:	4b7c      	ldr	r3, [pc, #496]	; (80030d0 <UART_SetConfig+0x2c8>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d828      	bhi.n	8002f3c <UART_SetConfig+0x134>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <UART_SetConfig+0xe8>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f25 	.word	0x08002f25
 8002ef4:	08002f3d 	.word	0x08002f3d
 8002ef8:	08002f3d 	.word	0x08002f3d
 8002efc:	08002f3d 	.word	0x08002f3d
 8002f00:	08002f31 	.word	0x08002f31
 8002f04:	08002f3d 	.word	0x08002f3d
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08002f3d 	.word	0x08002f3d
 8002f10:	08002f2b 	.word	0x08002f2b
 8002f14:	08002f3d 	.word	0x08002f3d
 8002f18:	08002f3d 	.word	0x08002f3d
 8002f1c:	08002f3d 	.word	0x08002f3d
 8002f20:	08002f37 	.word	0x08002f37
 8002f24:	2300      	movs	r3, #0
 8002f26:	76fb      	strb	r3, [r7, #27]
 8002f28:	e084      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	76fb      	strb	r3, [r7, #27]
 8002f2e:	e081      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f30:	2304      	movs	r3, #4
 8002f32:	76fb      	strb	r3, [r7, #27]
 8002f34:	e07e      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f36:	2308      	movs	r3, #8
 8002f38:	76fb      	strb	r3, [r7, #27]
 8002f3a:	e07b      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	76fb      	strb	r3, [r7, #27]
 8002f40:	e078      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a64      	ldr	r2, [pc, #400]	; (80030d8 <UART_SetConfig+0x2d0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d120      	bne.n	8002f8e <UART_SetConfig+0x186>
 8002f4c:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <UART_SetConfig+0x2c8>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f56:	2b30      	cmp	r3, #48	; 0x30
 8002f58:	d013      	beq.n	8002f82 <UART_SetConfig+0x17a>
 8002f5a:	2b30      	cmp	r3, #48	; 0x30
 8002f5c:	d814      	bhi.n	8002f88 <UART_SetConfig+0x180>
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d009      	beq.n	8002f76 <UART_SetConfig+0x16e>
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d810      	bhi.n	8002f88 <UART_SetConfig+0x180>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <UART_SetConfig+0x168>
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d006      	beq.n	8002f7c <UART_SetConfig+0x174>
 8002f6e:	e00b      	b.n	8002f88 <UART_SetConfig+0x180>
 8002f70:	2300      	movs	r3, #0
 8002f72:	76fb      	strb	r3, [r7, #27]
 8002f74:	e05e      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f76:	2302      	movs	r3, #2
 8002f78:	76fb      	strb	r3, [r7, #27]
 8002f7a:	e05b      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	76fb      	strb	r3, [r7, #27]
 8002f80:	e058      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f82:	2308      	movs	r3, #8
 8002f84:	76fb      	strb	r3, [r7, #27]
 8002f86:	e055      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	76fb      	strb	r3, [r7, #27]
 8002f8c:	e052      	b.n	8003034 <UART_SetConfig+0x22c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a52      	ldr	r2, [pc, #328]	; (80030dc <UART_SetConfig+0x2d4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d120      	bne.n	8002fda <UART_SetConfig+0x1d2>
 8002f98:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <UART_SetConfig+0x2c8>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa4:	d013      	beq.n	8002fce <UART_SetConfig+0x1c6>
 8002fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa8:	d814      	bhi.n	8002fd4 <UART_SetConfig+0x1cc>
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d009      	beq.n	8002fc2 <UART_SetConfig+0x1ba>
 8002fae:	2b80      	cmp	r3, #128	; 0x80
 8002fb0:	d810      	bhi.n	8002fd4 <UART_SetConfig+0x1cc>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <UART_SetConfig+0x1b4>
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	d006      	beq.n	8002fc8 <UART_SetConfig+0x1c0>
 8002fba:	e00b      	b.n	8002fd4 <UART_SetConfig+0x1cc>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e038      	b.n	8003034 <UART_SetConfig+0x22c>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e035      	b.n	8003034 <UART_SetConfig+0x22c>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e032      	b.n	8003034 <UART_SetConfig+0x22c>
 8002fce:	2308      	movs	r3, #8
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02f      	b.n	8003034 <UART_SetConfig+0x22c>
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	76fb      	strb	r3, [r7, #27]
 8002fd8:	e02c      	b.n	8003034 <UART_SetConfig+0x22c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <UART_SetConfig+0x2c0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d125      	bne.n	8003030 <UART_SetConfig+0x228>
 8002fe4:	4b3a      	ldr	r3, [pc, #232]	; (80030d0 <UART_SetConfig+0x2c8>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d017      	beq.n	8003024 <UART_SetConfig+0x21c>
 8002ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff8:	d817      	bhi.n	800302a <UART_SetConfig+0x222>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d00b      	beq.n	8003018 <UART_SetConfig+0x210>
 8003000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003004:	d811      	bhi.n	800302a <UART_SetConfig+0x222>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <UART_SetConfig+0x20a>
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d006      	beq.n	800301e <UART_SetConfig+0x216>
 8003010:	e00b      	b.n	800302a <UART_SetConfig+0x222>
 8003012:	2300      	movs	r3, #0
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00d      	b.n	8003034 <UART_SetConfig+0x22c>
 8003018:	2302      	movs	r3, #2
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e00a      	b.n	8003034 <UART_SetConfig+0x22c>
 800301e:	2304      	movs	r3, #4
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e007      	b.n	8003034 <UART_SetConfig+0x22c>
 8003024:	2308      	movs	r3, #8
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e004      	b.n	8003034 <UART_SetConfig+0x22c>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]
 800302e:	e001      	b.n	8003034 <UART_SetConfig+0x22c>
 8003030:	2310      	movs	r3, #16
 8003032:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <UART_SetConfig+0x2c0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	f040 8084 	bne.w	8003148 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003040:	7efb      	ldrb	r3, [r7, #27]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d823      	bhi.n	800308e <UART_SetConfig+0x286>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0x244>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003071 	.word	0x08003071
 8003050:	0800308f 	.word	0x0800308f
 8003054:	08003079 	.word	0x08003079
 8003058:	0800308f 	.word	0x0800308f
 800305c:	0800307f 	.word	0x0800307f
 8003060:	0800308f 	.word	0x0800308f
 8003064:	0800308f 	.word	0x0800308f
 8003068:	0800308f 	.word	0x0800308f
 800306c:	08003087 	.word	0x08003087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7fe fe7c 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8003074:	6178      	str	r0, [r7, #20]
        break;
 8003076:	e00f      	b.n	8003098 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <UART_SetConfig+0x2d8>)
 800307a:	617b      	str	r3, [r7, #20]
        break;
 800307c:	e00c      	b.n	8003098 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307e:	f7fe fddd 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8003082:	6178      	str	r0, [r7, #20]
        break;
 8003084:	e008      	b.n	8003098 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800308a:	617b      	str	r3, [r7, #20]
        break;
 800308c:	e004      	b.n	8003098 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	76bb      	strb	r3, [r7, #26]
        break;
 8003096:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8102 	beq.w	80032a4 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d305      	bcc.n	80030bc <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d913      	bls.n	80030e4 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	76bb      	strb	r3, [r7, #26]
 80030c0:	e0f0      	b.n	80032a4 <UART_SetConfig+0x49c>
 80030c2:	bf00      	nop
 80030c4:	efff69f3 	.word	0xefff69f3
 80030c8:	40008000 	.word	0x40008000
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40004400 	.word	0x40004400
 80030d8:	40004800 	.word	0x40004800
 80030dc:	40004c00 	.word	0x40004c00
 80030e0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f04f 0100 	mov.w	r1, #0
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	020b      	lsls	r3, r1, #8
 80030f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030fa:	0202      	lsls	r2, r0, #8
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	6849      	ldr	r1, [r1, #4]
 8003100:	0849      	lsrs	r1, r1, #1
 8003102:	4608      	mov	r0, r1
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	1814      	adds	r4, r2, r0
 800310a:	eb43 0501 	adc.w	r5, r3, r1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	461a      	mov	r2, r3
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	4620      	mov	r0, r4
 800311a:	4629      	mov	r1, r5
 800311c:	f7fd f85a 	bl	80001d4 <__aeabi_uldivmod>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4613      	mov	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800312e:	d308      	bcc.n	8003142 <UART_SetConfig+0x33a>
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003136:	d204      	bcs.n	8003142 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	e0b0      	b.n	80032a4 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	76bb      	strb	r3, [r7, #26]
 8003146:	e0ad      	b.n	80032a4 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003150:	d15c      	bne.n	800320c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003152:	7efb      	ldrb	r3, [r7, #27]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d828      	bhi.n	80031aa <UART_SetConfig+0x3a2>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <UART_SetConfig+0x358>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003185 	.word	0x08003185
 8003164:	0800318d 	.word	0x0800318d
 8003168:	08003195 	.word	0x08003195
 800316c:	080031ab 	.word	0x080031ab
 8003170:	0800319b 	.word	0x0800319b
 8003174:	080031ab 	.word	0x080031ab
 8003178:	080031ab 	.word	0x080031ab
 800317c:	080031ab 	.word	0x080031ab
 8003180:	080031a3 	.word	0x080031a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003184:	f7fe fdf2 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8003188:	6178      	str	r0, [r7, #20]
        break;
 800318a:	e013      	b.n	80031b4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800318c:	f7fe fe04 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 8003190:	6178      	str	r0, [r7, #20]
        break;
 8003192:	e00f      	b.n	80031b4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003194:	4b49      	ldr	r3, [pc, #292]	; (80032bc <UART_SetConfig+0x4b4>)
 8003196:	617b      	str	r3, [r7, #20]
        break;
 8003198:	e00c      	b.n	80031b4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319a:	f7fe fd4f 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 800319e:	6178      	str	r0, [r7, #20]
        break;
 80031a0:	e008      	b.n	80031b4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a6:	617b      	str	r3, [r7, #20]
        break;
 80031a8:	e004      	b.n	80031b4 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	76bb      	strb	r3, [r7, #26]
        break;
 80031b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d074      	beq.n	80032a4 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005a      	lsls	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d916      	bls.n	8003206 <UART_SetConfig+0x3fe>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d212      	bcs.n	8003206 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f023 030f 	bic.w	r3, r3, #15
 80031e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	89fb      	ldrh	r3, [r7, #14]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	89fa      	ldrh	r2, [r7, #14]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	e04e      	b.n	80032a4 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	76bb      	strb	r3, [r7, #26]
 800320a:	e04b      	b.n	80032a4 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800320c:	7efb      	ldrb	r3, [r7, #27]
 800320e:	2b08      	cmp	r3, #8
 8003210:	d827      	bhi.n	8003262 <UART_SetConfig+0x45a>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <UART_SetConfig+0x410>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	0800323d 	.word	0x0800323d
 800321c:	08003245 	.word	0x08003245
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003263 	.word	0x08003263
 8003228:	08003253 	.word	0x08003253
 800322c:	08003263 	.word	0x08003263
 8003230:	08003263 	.word	0x08003263
 8003234:	08003263 	.word	0x08003263
 8003238:	0800325b 	.word	0x0800325b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800323c:	f7fe fd96 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8003240:	6178      	str	r0, [r7, #20]
        break;
 8003242:	e013      	b.n	800326c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7fe fda8 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 8003248:	6178      	str	r0, [r7, #20]
        break;
 800324a:	e00f      	b.n	800326c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <UART_SetConfig+0x4b4>)
 800324e:	617b      	str	r3, [r7, #20]
        break;
 8003250:	e00c      	b.n	800326c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003252:	f7fe fcf3 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8003256:	6178      	str	r0, [r7, #20]
        break;
 8003258:	e008      	b.n	800326c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325e:	617b      	str	r3, [r7, #20]
        break;
 8003260:	e004      	b.n	800326c <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	76bb      	strb	r3, [r7, #26]
        break;
 800326a:	bf00      	nop
    }

    if (pclk != 0U)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d018      	beq.n	80032a4 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	085a      	lsrs	r2, r3, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	441a      	add	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	b29b      	uxth	r3, r3
 8003286:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	d908      	bls.n	80032a0 <UART_SetConfig+0x498>
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d204      	bcs.n	80032a0 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	e001      	b.n	80032a4 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	00f42400 	.word	0x00f42400

080032c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01a      	beq.n	80033d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033be:	d10a      	bne.n	80033d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003414:	f7fd fc04 	bl	8000c20 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d10e      	bne.n	8003446 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f82d 	bl	8003496 <UART_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e023      	b.n	800348e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d10e      	bne.n	8003472 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f817 	bl	8003496 <UART_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e00d      	b.n	800348e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a6:	e05e      	b.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d05a      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b0:	f7fd fbb6 	bl	8000c20 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d302      	bcc.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11b      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e043      	b.n	8003586 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02c      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800351a:	d124      	bne.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003524:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003534:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e00f      	b.n	8003586 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4013      	ands	r3, r2
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	bf0c      	ite	eq
 8003576:	2301      	moveq	r3, #1
 8003578:	2300      	movne	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	429a      	cmp	r2, r3
 8003582:	d091      	beq.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003594:	4904      	ldr	r1, [pc, #16]	; (80035a8 <MX_FATFS_Init+0x18>)
 8003596:	4805      	ldr	r0, [pc, #20]	; (80035ac <MX_FATFS_Init+0x1c>)
 8003598:	f003 f924 	bl	80067e4 <FATFS_LinkDriver>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <MX_FATFS_Init+0x20>)
 80035a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000164 	.word	0x20000164
 80035ac:	2000000c 	.word	0x2000000c
 80035b0:	20000168 	.word	0x20000168

080035b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80035b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f9d9 	bl	8003988 <USER_SPI_initialize>
 80035d6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fab5 	bl	8003b5c <USER_SPI_status>
 80035f2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800360c:	7bf8      	ldrb	r0, [r7, #15]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	f000 fab8 	bl	8003b88 <USER_SPI_read>
 8003618:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4603      	mov	r3, r0
 8003630:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8003632:	7bf8      	ldrb	r0, [r7, #15]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	f000 fb0b 	bl	8003c54 <USER_SPI_write>
 800363e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	603a      	str	r2, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
 8003654:	460b      	mov	r3, r1
 8003656:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003658:	79b9      	ldrb	r1, [r7, #6]
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fb74 	bl	8003d4c <USER_SPI_ioctl>
 8003664:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003678:	f7fd fad2 	bl	8000c20 <HAL_GetTick>
 800367c:	4603      	mov	r3, r0
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <SPI_Timer_On+0x20>)
 8003680:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003682:	4a04      	ldr	r2, [pc, #16]	; (8003694 <SPI_Timer_On+0x24>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6013      	str	r3, [r2, #0]
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200005cc 	.word	0x200005cc
 8003694:	200005d0 	.word	0x200005d0

08003698 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800369c:	f7fd fac0 	bl	8000c20 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <SPI_Timer_Status+0x24>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	1ad2      	subs	r2, r2, r3
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <SPI_Timer_Status+0x28>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	bf34      	ite	cc
 80036b0:	2301      	movcc	r3, #1
 80036b2:	2300      	movcs	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200005cc 	.word	0x200005cc
 80036c0:	200005d0 	.word	0x200005d0

080036c4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80036ce:	f107 020f 	add.w	r2, r7, #15
 80036d2:	1df9      	adds	r1, r7, #7
 80036d4:	2332      	movs	r3, #50	; 0x32
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2301      	movs	r3, #1
 80036da:	4804      	ldr	r0, [pc, #16]	; (80036ec <xchg_spi+0x28>)
 80036dc:	f7fe ffd3 	bl	8002686 <HAL_SPI_TransmitReceive>
    return rxDat;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000078 	.word	0x20000078

080036f0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e00a      	b.n	8003716 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	18d4      	adds	r4, r2, r3
 8003706:	20ff      	movs	r0, #255	; 0xff
 8003708:	f7ff ffdc 	bl	80036c4 <xchg_spi>
 800370c:	4603      	mov	r3, r0
 800370e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d3f0      	bcc.n	8003700 <rcvr_spi_multi+0x10>
	}
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bd90      	pop	{r4, r7, pc}

08003728 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e009      	b.n	800374c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ffbf 	bl	80036c4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3301      	adds	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d3f1      	bcc.n	8003738 <xmit_spi_multi+0x10>
	}
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003766:	f7fd fa5b 	bl	8000c20 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003770:	20ff      	movs	r0, #255	; 0xff
 8003772:	f7ff ffa7 	bl	80036c4 <xchg_spi>
 8003776:	4603      	mov	r3, r0
 8003778:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2bff      	cmp	r3, #255	; 0xff
 800377e:	d007      	beq.n	8003790 <wait_ready+0x32>
 8003780:	f7fd fa4e 	bl	8000c20 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	429a      	cmp	r2, r3
 800378e:	d8ef      	bhi.n	8003770 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2bff      	cmp	r3, #255	; 0xff
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80037a8:	2201      	movs	r2, #1
 80037aa:	2110      	movs	r1, #16
 80037ac:	4803      	ldr	r0, [pc, #12]	; (80037bc <despiselect+0x18>)
 80037ae:	f7fd fcc7 	bl	8001140 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80037b2:	20ff      	movs	r0, #255	; 0xff
 80037b4:	f7ff ff86 	bl	80036c4 <xchg_spi>

}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	48000800 	.word	0x48000800

080037c0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80037c4:	2200      	movs	r2, #0
 80037c6:	2110      	movs	r1, #16
 80037c8:	4809      	ldr	r0, [pc, #36]	; (80037f0 <spiselect+0x30>)
 80037ca:	f7fd fcb9 	bl	8001140 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80037ce:	20ff      	movs	r0, #255	; 0xff
 80037d0:	f7ff ff78 	bl	80036c4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80037d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037d8:	f7ff ffc1 	bl	800375e <wait_ready>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <spiselect+0x26>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e002      	b.n	80037ec <spiselect+0x2c>

	despiselect();
 80037e6:	f7ff ffdd 	bl	80037a4 <despiselect>
	return 0;	/* Timeout */
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	48000800 	.word	0x48000800

080037f4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80037fe:	20c8      	movs	r0, #200	; 0xc8
 8003800:	f7ff ff36 	bl	8003670 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003804:	20ff      	movs	r0, #255	; 0xff
 8003806:	f7ff ff5d 	bl	80036c4 <xchg_spi>
 800380a:	4603      	mov	r3, r0
 800380c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2bff      	cmp	r3, #255	; 0xff
 8003812:	d104      	bne.n	800381e <rcvr_datablock+0x2a>
 8003814:	f7ff ff40 	bl	8003698 <SPI_Timer_Status>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f2      	bne.n	8003804 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2bfe      	cmp	r3, #254	; 0xfe
 8003822:	d001      	beq.n	8003828 <rcvr_datablock+0x34>
 8003824:	2300      	movs	r3, #0
 8003826:	e00a      	b.n	800383e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ff60 	bl	80036f0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003830:	20ff      	movs	r0, #255	; 0xff
 8003832:	f7ff ff47 	bl	80036c4 <xchg_spi>
 8003836:	20ff      	movs	r0, #255	; 0xff
 8003838:	f7ff ff44 	bl	80036c4 <xchg_spi>

	return 1;						/* Function succeeded */
 800383c:	2301      	movs	r3, #1
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003852:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003856:	f7ff ff82 	bl	800375e <wait_ready>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <xmit_datablock+0x1e>
 8003860:	2300      	movs	r3, #0
 8003862:	e01e      	b.n	80038a2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff2c 	bl	80036c4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	2bfd      	cmp	r3, #253	; 0xfd
 8003870:	d016      	beq.n	80038a0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff56 	bl	8003728 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800387c:	20ff      	movs	r0, #255	; 0xff
 800387e:	f7ff ff21 	bl	80036c4 <xchg_spi>
 8003882:	20ff      	movs	r0, #255	; 0xff
 8003884:	f7ff ff1e 	bl	80036c4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003888:	20ff      	movs	r0, #255	; 0xff
 800388a:	f7ff ff1b 	bl	80036c4 <xchg_spi>
 800388e:	4603      	mov	r3, r0
 8003890:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2b05      	cmp	r3, #5
 800389a:	d001      	beq.n	80038a0 <xmit_datablock+0x5a>
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <xmit_datablock+0x5c>
	}
	return 1;
 80038a0:	2301      	movs	r3, #1
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	6039      	str	r1, [r7, #0]
 80038b4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da0e      	bge.n	80038dc <send_cmd+0x32>
		cmd &= 0x7F;
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80038c6:	2100      	movs	r1, #0
 80038c8:	2037      	movs	r0, #55	; 0x37
 80038ca:	f7ff ffee 	bl	80038aa <send_cmd>
 80038ce:	4603      	mov	r3, r0
 80038d0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80038d2:	7bbb      	ldrb	r3, [r7, #14]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d901      	bls.n	80038dc <send_cmd+0x32>
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	e051      	b.n	8003980 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d008      	beq.n	80038f4 <send_cmd+0x4a>
		despiselect();
 80038e2:	f7ff ff5f 	bl	80037a4 <despiselect>
		if (!spiselect()) return 0xFF;
 80038e6:	f7ff ff6b 	bl	80037c0 <spiselect>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <send_cmd+0x4a>
 80038f0:	23ff      	movs	r3, #255	; 0xff
 80038f2:	e045      	b.n	8003980 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fee1 	bl	80036c4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	0e1b      	lsrs	r3, r3, #24
 8003906:	b2db      	uxtb	r3, r3
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fedb 	bl	80036c4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fed5 	bl	80036c4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fecf 	bl	80036c4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff feca 	bl	80036c4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <send_cmd+0x94>
 800393a:	2395      	movs	r3, #149	; 0x95
 800393c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d101      	bne.n	8003948 <send_cmd+0x9e>
 8003944:	2387      	movs	r3, #135	; 0x87
 8003946:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff feba 	bl	80036c4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d102      	bne.n	800395c <send_cmd+0xb2>
 8003956:	20ff      	movs	r0, #255	; 0xff
 8003958:	f7ff feb4 	bl	80036c4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800395c:	230a      	movs	r3, #10
 800395e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003960:	20ff      	movs	r0, #255	; 0xff
 8003962:	f7ff feaf 	bl	80036c4 <xchg_spi>
 8003966:	4603      	mov	r3, r0
 8003968:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800396a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800396e:	2b00      	cmp	r3, #0
 8003970:	da05      	bge.n	800397e <send_cmd+0xd4>
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	3b01      	subs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <send_cmd+0xb6>

	return res;							/* Return received response */
 800397e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <USER_SPI_initialize+0x14>
 8003998:	2301      	movs	r3, #1
 800399a:	e0d4      	b.n	8003b46 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800399c:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <USER_SPI_initialize+0x1c8>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <USER_SPI_initialize+0x2a>
 80039aa:	4b69      	ldr	r3, [pc, #420]	; (8003b50 <USER_SPI_initialize+0x1c8>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e0c9      	b.n	8003b46 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 80039b2:	4b68      	ldr	r3, [pc, #416]	; (8003b54 <USER_SPI_initialize+0x1cc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b66      	ldr	r3, [pc, #408]	; (8003b54 <USER_SPI_initialize+0x1cc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80039c0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80039c2:	230a      	movs	r3, #10
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	e005      	b.n	80039d4 <USER_SPI_initialize+0x4c>
 80039c8:	20ff      	movs	r0, #255	; 0xff
 80039ca:	f7ff fe7b 	bl	80036c4 <xchg_spi>
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f6      	bne.n	80039c8 <USER_SPI_initialize+0x40>

	ty = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80039de:	2100      	movs	r1, #0
 80039e0:	2000      	movs	r0, #0
 80039e2:	f7ff ff62 	bl	80038aa <send_cmd>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	f040 808b 	bne.w	8003b04 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80039ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039f2:	f7ff fe3d 	bl	8003670 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80039f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80039fa:	2008      	movs	r0, #8
 80039fc:	f7ff ff55 	bl	80038aa <send_cmd>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d151      	bne.n	8003aaa <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
 8003a0a:	e00d      	b.n	8003a28 <USER_SPI_initialize+0xa0>
 8003a0c:	7bfc      	ldrb	r4, [r7, #15]
 8003a0e:	20ff      	movs	r0, #255	; 0xff
 8003a10:	f7ff fe58 	bl	80036c4 <xchg_spi>
 8003a14:	4603      	mov	r3, r0
 8003a16:	461a      	mov	r2, r3
 8003a18:	f107 0310 	add.w	r3, r7, #16
 8003a1c:	4423      	add	r3, r4
 8003a1e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	3301      	adds	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d9ee      	bls.n	8003a0c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003a2e:	7abb      	ldrb	r3, [r7, #10]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d167      	bne.n	8003b04 <USER_SPI_initialize+0x17c>
 8003a34:	7afb      	ldrb	r3, [r7, #11]
 8003a36:	2baa      	cmp	r3, #170	; 0xaa
 8003a38:	d164      	bne.n	8003b04 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003a3a:	bf00      	nop
 8003a3c:	f7ff fe2c 	bl	8003698 <SPI_Timer_Status>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <USER_SPI_initialize+0xce>
 8003a46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003a4a:	20a9      	movs	r0, #169	; 0xa9
 8003a4c:	f7ff ff2d 	bl	80038aa <send_cmd>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f2      	bne.n	8003a3c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003a56:	f7ff fe1f 	bl	8003698 <SPI_Timer_Status>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d051      	beq.n	8003b04 <USER_SPI_initialize+0x17c>
 8003a60:	2100      	movs	r1, #0
 8003a62:	203a      	movs	r0, #58	; 0x3a
 8003a64:	f7ff ff21 	bl	80038aa <send_cmd>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d14a      	bne.n	8003b04 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	e00d      	b.n	8003a90 <USER_SPI_initialize+0x108>
 8003a74:	7bfc      	ldrb	r4, [r7, #15]
 8003a76:	20ff      	movs	r0, #255	; 0xff
 8003a78:	f7ff fe24 	bl	80036c4 <xchg_spi>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f107 0310 	add.w	r3, r7, #16
 8003a84:	4423      	add	r3, r4
 8003a86:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d9ee      	bls.n	8003a74 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003a96:	7a3b      	ldrb	r3, [r7, #8]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <USER_SPI_initialize+0x11c>
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	e000      	b.n	8003aa6 <USER_SPI_initialize+0x11e>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	737b      	strb	r3, [r7, #13]
 8003aa8:	e02c      	b.n	8003b04 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003aaa:	2100      	movs	r1, #0
 8003aac:	20a9      	movs	r0, #169	; 0xa9
 8003aae:	f7ff fefc 	bl	80038aa <send_cmd>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d804      	bhi.n	8003ac2 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003ab8:	2302      	movs	r3, #2
 8003aba:	737b      	strb	r3, [r7, #13]
 8003abc:	23a9      	movs	r3, #169	; 0xa9
 8003abe:	73bb      	strb	r3, [r7, #14]
 8003ac0:	e003      	b.n	8003aca <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	737b      	strb	r3, [r7, #13]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003aca:	bf00      	nop
 8003acc:	f7ff fde4 	bl	8003698 <SPI_Timer_Status>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <USER_SPI_initialize+0x15e>
 8003ad6:	7bbb      	ldrb	r3, [r7, #14]
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fee5 	bl	80038aa <send_cmd>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f2      	bne.n	8003acc <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003ae6:	f7ff fdd7 	bl	8003698 <SPI_Timer_Status>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <USER_SPI_initialize+0x178>
 8003af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003af4:	2010      	movs	r0, #16
 8003af6:	f7ff fed8 	bl	80038aa <send_cmd>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <USER_SPI_initialize+0x17c>
				ty = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <USER_SPI_initialize+0x1d0>)
 8003b06:	7b7b      	ldrb	r3, [r7, #13]
 8003b08:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003b0a:	f7ff fe4b 	bl	80037a4 <despiselect>

	if (ty) {			/* OK */
 8003b0e:	7b7b      	ldrb	r3, [r7, #13]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d012      	beq.n	8003b3a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <USER_SPI_initialize+0x1cc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <USER_SPI_initialize+0x1cc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0218 	orr.w	r2, r2, #24
 8003b26:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <USER_SPI_initialize+0x1c8>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <USER_SPI_initialize+0x1c8>)
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e002      	b.n	8003b40 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <USER_SPI_initialize+0x1c8>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <USER_SPI_initialize+0x1c8>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd90      	pop	{r4, r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000020 	.word	0x20000020
 8003b54:	20000078 	.word	0x20000078
 8003b58:	20000040 	.word	0x20000040

08003b5c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <USER_SPI_status+0x14>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e002      	b.n	8003b76 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <USER_SPI_status+0x28>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000020 	.word	0x20000020

08003b88 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4603      	mov	r3, r0
 8003b96:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <USER_SPI_read+0x1c>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <USER_SPI_read+0x20>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	e04d      	b.n	8003c44 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <USER_SPI_read+0xc4>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <USER_SPI_read+0x32>
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e044      	b.n	8003c44 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003bba:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <USER_SPI_read+0xc8>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <USER_SPI_read+0x44>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	025b      	lsls	r3, r3, #9
 8003bca:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d111      	bne.n	8003bf6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	2011      	movs	r0, #17
 8003bd6:	f7ff fe68 	bl	80038aa <send_cmd>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d129      	bne.n	8003c34 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003be4:	68b8      	ldr	r0, [r7, #8]
 8003be6:	f7ff fe05 	bl	80037f4 <rcvr_datablock>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d021      	beq.n	8003c34 <USER_SPI_read+0xac>
			count = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	e01e      	b.n	8003c34 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	2012      	movs	r0, #18
 8003bfa:	f7ff fe56 	bl	80038aa <send_cmd>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d117      	bne.n	8003c34 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c08:	68b8      	ldr	r0, [r7, #8]
 8003c0a:	f7ff fdf3 	bl	80037f4 <rcvr_datablock>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <USER_SPI_read+0xa2>
				buff += 512;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003c1a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ed      	bne.n	8003c04 <USER_SPI_read+0x7c>
 8003c28:	e000      	b.n	8003c2c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003c2a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	200c      	movs	r0, #12
 8003c30:	f7ff fe3b 	bl	80038aa <send_cmd>
		}
	}
	despiselect();
 8003c34:	f7ff fdb6 	bl	80037a4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000020 	.word	0x20000020
 8003c50:	20000040 	.word	0x20000040

08003c54 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <USER_SPI_write+0x1c>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <USER_SPI_write+0x20>
 8003c70:	2304      	movs	r3, #4
 8003c72:	e063      	b.n	8003d3c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003c74:	4b33      	ldr	r3, [pc, #204]	; (8003d44 <USER_SPI_write+0xf0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <USER_SPI_write+0x32>
 8003c82:	2303      	movs	r3, #3
 8003c84:	e05a      	b.n	8003d3c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <USER_SPI_write+0xf0>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <USER_SPI_write+0x44>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e051      	b.n	8003d3c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003c98:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <USER_SPI_write+0xf4>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <USER_SPI_write+0x56>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	025b      	lsls	r3, r3, #9
 8003ca8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d110      	bne.n	8003cd2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	2018      	movs	r0, #24
 8003cb4:	f7ff fdf9 	bl	80038aa <send_cmd>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d136      	bne.n	8003d2c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003cbe:	21fe      	movs	r1, #254	; 0xfe
 8003cc0:	68b8      	ldr	r0, [r7, #8]
 8003cc2:	f7ff fdc0 	bl	8003846 <xmit_datablock>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d02f      	beq.n	8003d2c <USER_SPI_write+0xd8>
			count = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	e02c      	b.n	8003d2c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <USER_SPI_write+0xf4>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f003 0306 	and.w	r3, r3, #6
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <USER_SPI_write+0x92>
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	2097      	movs	r0, #151	; 0x97
 8003ce2:	f7ff fde2 	bl	80038aa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	2019      	movs	r0, #25
 8003cea:	f7ff fdde 	bl	80038aa <send_cmd>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11b      	bne.n	8003d2c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003cf4:	21fc      	movs	r1, #252	; 0xfc
 8003cf6:	68b8      	ldr	r0, [r7, #8]
 8003cf8:	f7ff fda5 	bl	8003846 <xmit_datablock>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <USER_SPI_write+0xc4>
				buff += 512;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d08:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ee      	bne.n	8003cf4 <USER_SPI_write+0xa0>
 8003d16:	e000      	b.n	8003d1a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003d18:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003d1a:	21fd      	movs	r1, #253	; 0xfd
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7ff fd92 	bl	8003846 <xmit_datablock>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <USER_SPI_write+0xd8>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003d2c:	f7ff fd3a 	bl	80037a4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000020 	.word	0x20000020
 8003d48:	20000040 	.word	0x20000040

08003d4c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08c      	sub	sp, #48	; 0x30
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	603a      	str	r2, [r7, #0]
 8003d56:	71fb      	strb	r3, [r7, #7]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <USER_SPI_ioctl+0x1a>
 8003d62:	2304      	movs	r3, #4
 8003d64:	e15a      	b.n	800401c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003d66:	4baf      	ldr	r3, [pc, #700]	; (8004024 <USER_SPI_ioctl+0x2d8>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <USER_SPI_ioctl+0x2c>
 8003d74:	2303      	movs	r3, #3
 8003d76:	e151      	b.n	800401c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003d7e:	79bb      	ldrb	r3, [r7, #6]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	f200 8136 	bhi.w	8003ff2 <USER_SPI_ioctl+0x2a6>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <USER_SPI_ioctl+0x40>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003da1 	.word	0x08003da1
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003ff3 	.word	0x08003ff3
 8003d98:	08003e61 	.word	0x08003e61
 8003d9c:	08003f57 	.word	0x08003f57
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003da0:	f7ff fd0e 	bl	80037c0 <spiselect>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8127 	beq.w	8003ffa <USER_SPI_ioctl+0x2ae>
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003db2:	e122      	b.n	8003ffa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003db4:	2100      	movs	r1, #0
 8003db6:	2009      	movs	r0, #9
 8003db8:	f7ff fd77 	bl	80038aa <send_cmd>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 811d 	bne.w	8003ffe <USER_SPI_ioctl+0x2b2>
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	2110      	movs	r1, #16
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fd12 	bl	80037f4 <rcvr_datablock>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8113 	beq.w	8003ffe <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003dd8:	7b3b      	ldrb	r3, [r7, #12]
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d111      	bne.n	8003e06 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003de2:	7d7b      	ldrb	r3, [r7, #21]
 8003de4:	461a      	mov	r2, r3
 8003de6:	7d3b      	ldrb	r3, [r7, #20]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	4413      	add	r3, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003df6:	4413      	add	r3, r2
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	029a      	lsls	r2, r3, #10
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e028      	b.n	8003e58 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003e06:	7c7b      	ldrb	r3, [r7, #17]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	7dbb      	ldrb	r3, [r7, #22]
 8003e10:	09db      	lsrs	r3, r3, #7
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	7d7b      	ldrb	r3, [r7, #21]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 0306 	and.w	r3, r3, #6
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	4413      	add	r3, r2
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	3302      	adds	r3, #2
 8003e2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003e2e:	7d3b      	ldrb	r3, [r7, #20]
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	7cbb      	ldrb	r3, [r7, #18]
 8003e3e:	029b      	lsls	r3, r3, #10
 8003e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e44:	4413      	add	r3, r2
 8003e46:	3301      	adds	r3, #1
 8003e48:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003e4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003e4e:	3b09      	subs	r3, #9
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	409a      	lsls	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003e5e:	e0ce      	b.n	8003ffe <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003e60:	4b71      	ldr	r3, [pc, #452]	; (8004028 <USER_SPI_ioctl+0x2dc>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d031      	beq.n	8003ed0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	208d      	movs	r0, #141	; 0x8d
 8003e70:	f7ff fd1b 	bl	80038aa <send_cmd>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 80c3 	bne.w	8004002 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003e7c:	20ff      	movs	r0, #255	; 0xff
 8003e7e:	f7ff fc21 	bl	80036c4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003e82:	f107 030c 	add.w	r3, r7, #12
 8003e86:	2110      	movs	r1, #16
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fcb3 	bl	80037f4 <rcvr_datablock>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80b6 	beq.w	8004002 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003e96:	2330      	movs	r3, #48	; 0x30
 8003e98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003e9c:	e007      	b.n	8003eae <USER_SPI_ioctl+0x162>
 8003e9e:	20ff      	movs	r0, #255	; 0xff
 8003ea0:	f7ff fc10 	bl	80036c4 <xchg_spi>
 8003ea4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003eae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f3      	bne.n	8003e9e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003eb6:	7dbb      	ldrb	r3, [r7, #22]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	fa03 f202 	lsl.w	r2, r3, r2
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003ece:	e098      	b.n	8004002 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2009      	movs	r0, #9
 8003ed4:	f7ff fce9 	bl	80038aa <send_cmd>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 8091 	bne.w	8004002 <USER_SPI_ioctl+0x2b6>
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	2110      	movs	r1, #16
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fc84 	bl	80037f4 <rcvr_datablock>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8087 	beq.w	8004002 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003ef4:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <USER_SPI_ioctl+0x2dc>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d012      	beq.n	8003f26 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003f00:	7dbb      	ldrb	r3, [r7, #22]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003f08:	7dfa      	ldrb	r2, [r7, #23]
 8003f0a:	09d2      	lsrs	r2, r2, #7
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	4413      	add	r3, r2
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	7e7b      	ldrb	r3, [r7, #25]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e013      	b.n	8003f4e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003f26:	7dbb      	ldrb	r3, [r7, #22]
 8003f28:	109b      	asrs	r3, r3, #2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	3301      	adds	r3, #1
 8003f32:	7dfa      	ldrb	r2, [r7, #23]
 8003f34:	00d2      	lsls	r2, r2, #3
 8003f36:	f002 0218 	and.w	r2, r2, #24
 8003f3a:	7df9      	ldrb	r1, [r7, #23]
 8003f3c:	0949      	lsrs	r1, r1, #5
 8003f3e:	b2c9      	uxtb	r1, r1
 8003f40:	440a      	add	r2, r1
 8003f42:	3201      	adds	r2, #1
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003f54:	e055      	b.n	8004002 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003f56:	4b34      	ldr	r3, [pc, #208]	; (8004028 <USER_SPI_ioctl+0x2dc>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	f003 0306 	and.w	r3, r3, #6
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d051      	beq.n	8004006 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003f62:	f107 020c 	add.w	r2, r7, #12
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	210b      	movs	r1, #11
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff feee 	bl	8003d4c <USER_SPI_ioctl>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d149      	bne.n	800400a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003f76:	7b3b      	ldrb	r3, [r7, #12]
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <USER_SPI_ioctl+0x23e>
 8003f80:	7dbb      	ldrb	r3, [r7, #22]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d041      	beq.n	800400e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <USER_SPI_ioctl+0x2dc>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	025b      	lsls	r3, r3, #9
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	025b      	lsls	r3, r3, #9
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb4:	2020      	movs	r0, #32
 8003fb6:	f7ff fc78 	bl	80038aa <send_cmd>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d128      	bne.n	8004012 <USER_SPI_ioctl+0x2c6>
 8003fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fc2:	2021      	movs	r0, #33	; 0x21
 8003fc4:	f7ff fc71 	bl	80038aa <send_cmd>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d121      	bne.n	8004012 <USER_SPI_ioctl+0x2c6>
 8003fce:	2100      	movs	r1, #0
 8003fd0:	2026      	movs	r0, #38	; 0x26
 8003fd2:	f7ff fc6a 	bl	80038aa <send_cmd>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11a      	bne.n	8004012 <USER_SPI_ioctl+0x2c6>
 8003fdc:	f247 5030 	movw	r0, #30000	; 0x7530
 8003fe0:	f7ff fbbd 	bl	800375e <wait_ready>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d013      	beq.n	8004012 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003ff0:	e00f      	b.n	8004012 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003ff2:	2304      	movs	r3, #4
 8003ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003ff8:	e00c      	b.n	8004014 <USER_SPI_ioctl+0x2c8>
		break;
 8003ffa:	bf00      	nop
 8003ffc:	e00a      	b.n	8004014 <USER_SPI_ioctl+0x2c8>
		break;
 8003ffe:	bf00      	nop
 8004000:	e008      	b.n	8004014 <USER_SPI_ioctl+0x2c8>
		break;
 8004002:	bf00      	nop
 8004004:	e006      	b.n	8004014 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004006:	bf00      	nop
 8004008:	e004      	b.n	8004014 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <USER_SPI_ioctl+0x2c8>
		break;
 8004012:	bf00      	nop
	}

	despiselect();
 8004014:	f7ff fbc6 	bl	80037a4 <despiselect>

	return res;
 8004018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800401c:	4618      	mov	r0, r3
 800401e:	3730      	adds	r7, #48	; 0x30
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000020 	.word	0x20000020
 8004028:	20000040 	.word	0x20000040

0800402c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <disk_status+0x30>)
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	79fa      	ldrb	r2, [r7, #7]
 8004044:	4905      	ldr	r1, [pc, #20]	; (800405c <disk_status+0x30>)
 8004046:	440a      	add	r2, r1
 8004048:	7a12      	ldrb	r2, [r2, #8]
 800404a:	4610      	mov	r0, r2
 800404c:	4798      	blx	r3
 800404e:	4603      	mov	r3, r0
 8004050:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004052:	7bfb      	ldrb	r3, [r7, #15]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	2000006c 	.word	0x2000006c

08004060 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <disk_initialize+0x48>)
 8004072:	5cd3      	ldrb	r3, [r2, r3]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d111      	bne.n	800409c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <disk_initialize+0x48>)
 800407c:	2101      	movs	r1, #1
 800407e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <disk_initialize+0x48>)
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	79fa      	ldrb	r2, [r7, #7]
 800408e:	4906      	ldr	r1, [pc, #24]	; (80040a8 <disk_initialize+0x48>)
 8004090:	440a      	add	r2, r1
 8004092:	7a12      	ldrb	r2, [r2, #8]
 8004094:	4610      	mov	r0, r2
 8004096:	4798      	blx	r3
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	2000006c 	.word	0x2000006c

080040ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4603      	mov	r3, r0
 80040ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <disk_read+0x3c>)
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	689c      	ldr	r4, [r3, #8]
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <disk_read+0x3c>)
 80040cc:	4413      	add	r3, r2
 80040ce:	7a18      	ldrb	r0, [r3, #8]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	47a0      	blx	r4
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]
  return res;
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}
 80040e6:	bf00      	nop
 80040e8:	2000006c 	.word	0x2000006c

080040ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <disk_write+0x3c>)
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68dc      	ldr	r4, [r3, #12]
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	4a07      	ldr	r2, [pc, #28]	; (8004128 <disk_write+0x3c>)
 800410c:	4413      	add	r3, r2
 800410e:	7a18      	ldrb	r0, [r3, #8]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	47a0      	blx	r4
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]
  return res;
 800411c:	7dfb      	ldrb	r3, [r7, #23]
}
 800411e:	4618      	mov	r0, r3
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd90      	pop	{r4, r7, pc}
 8004126:	bf00      	nop
 8004128:	2000006c 	.word	0x2000006c

0800412c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	603a      	str	r2, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
 8004138:	460b      	mov	r3, r1
 800413a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	4a09      	ldr	r2, [pc, #36]	; (8004164 <disk_ioctl+0x38>)
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	79fa      	ldrb	r2, [r7, #7]
 800414a:	4906      	ldr	r1, [pc, #24]	; (8004164 <disk_ioctl+0x38>)
 800414c:	440a      	add	r2, r1
 800414e:	7a10      	ldrb	r0, [r2, #8]
 8004150:	79b9      	ldrb	r1, [r7, #6]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	4798      	blx	r3
 8004156:	4603      	mov	r3, r0
 8004158:	73fb      	strb	r3, [r7, #15]
  return res;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000006c 	.word	0x2000006c

08004168 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3301      	adds	r3, #1
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004178:	89fb      	ldrh	r3, [r7, #14]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	b21a      	sxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b21b      	sxth	r3, r3
 8004184:	4313      	orrs	r3, r2
 8004186:	b21b      	sxth	r3, r3
 8004188:	81fb      	strh	r3, [r7, #14]
	return rv;
 800418a:	89fb      	ldrh	r3, [r7, #14]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3303      	adds	r3, #3
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	3202      	adds	r2, #2
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	3201      	adds	r2, #1
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80041d0:	68fb      	ldr	r3, [r7, #12]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	887a      	ldrh	r2, [r7, #2]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	0a1b      	lsrs	r3, r3, #8
 8004252:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	1c53      	adds	r3, r2, #1
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1c59      	adds	r1, r3, #1
 8004290:	6179      	str	r1, [r7, #20]
 8004292:	7812      	ldrb	r2, [r2, #0]
 8004294:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3b01      	subs	r3, #1
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f1      	bne.n	8004286 <mem_cpy+0x1a>
	}
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80042ae:	b480      	push	{r7}
 80042b0:	b087      	sub	sp, #28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	617a      	str	r2, [r7, #20]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f3      	bne.n	80042be <mem_set+0x10>
}
 80042d6:	bf00      	nop
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80042e4:	b480      	push	{r7}
 80042e6:	b089      	sub	sp, #36	; 0x24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	61fa      	str	r2, [r7, #28]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	61ba      	str	r2, [r7, #24]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	1acb      	subs	r3, r1, r3
 8004310:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3b01      	subs	r3, #1
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <mem_cmp+0x40>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0eb      	beq.n	80042fc <mem_cmp+0x18>

	return r;
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3724      	adds	r7, #36	; 0x24
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800433c:	e002      	b.n	8004344 <chk_chr+0x12>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3301      	adds	r3, #1
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <chk_chr+0x26>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	4293      	cmp	r3, r2
 8004356:	d1f2      	bne.n	800433e <chk_chr+0xc>
	return *str;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	781b      	ldrb	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	e029      	b.n	80043d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800437c:	4a27      	ldr	r2, [pc, #156]	; (800441c <chk_lock+0xb4>)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01d      	beq.n	80043c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800438a:	4a24      	ldr	r2, [pc, #144]	; (800441c <chk_lock+0xb4>)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	4413      	add	r3, r2
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d116      	bne.n	80043ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <chk_lock+0xb4>)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	3304      	adds	r3, #4
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d10c      	bne.n	80043ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043b0:	4a1a      	ldr	r2, [pc, #104]	; (800441c <chk_lock+0xb4>)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	4413      	add	r3, r2
 80043b8:	3308      	adds	r3, #8
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d102      	bne.n	80043ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043c4:	e007      	b.n	80043d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3301      	adds	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d9d2      	bls.n	800437c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d109      	bne.n	80043f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <chk_lock+0x80>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d101      	bne.n	80043ec <chk_lock+0x84>
 80043e8:	2300      	movs	r3, #0
 80043ea:	e010      	b.n	800440e <chk_lock+0xa6>
 80043ec:	2312      	movs	r3, #18
 80043ee:	e00e      	b.n	800440e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d108      	bne.n	8004408 <chk_lock+0xa0>
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <chk_lock+0xb4>)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	4413      	add	r3, r2
 80043fe:	330c      	adds	r3, #12
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004406:	d101      	bne.n	800440c <chk_lock+0xa4>
 8004408:	2310      	movs	r3, #16
 800440a:	e000      	b.n	800440e <chk_lock+0xa6>
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	2000004c 	.word	0x2000004c

08004420 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004426:	2300      	movs	r3, #0
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	e002      	b.n	8004432 <enq_lock+0x12>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d806      	bhi.n	8004446 <enq_lock+0x26>
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <enq_lock+0x40>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	4413      	add	r3, r2
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f2      	bne.n	800442c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b02      	cmp	r3, #2
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	2000004c 	.word	0x2000004c

08004464 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e01f      	b.n	80044b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004474:	4a41      	ldr	r2, [pc, #260]	; (800457c <inc_lock+0x118>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4413      	add	r3, r2
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d113      	bne.n	80044ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004486:	4a3d      	ldr	r2, [pc, #244]	; (800457c <inc_lock+0x118>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	4413      	add	r3, r2
 800448e:	3304      	adds	r3, #4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004496:	429a      	cmp	r2, r3
 8004498:	d109      	bne.n	80044ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800449a:	4a38      	ldr	r2, [pc, #224]	; (800457c <inc_lock+0x118>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	4413      	add	r3, r2
 80044a2:	3308      	adds	r3, #8
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d006      	beq.n	80044bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3301      	adds	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d9dc      	bls.n	8004474 <inc_lock+0x10>
 80044ba:	e000      	b.n	80044be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80044bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d132      	bne.n	800452a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e002      	b.n	80044d0 <inc_lock+0x6c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3301      	adds	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d806      	bhi.n	80044e4 <inc_lock+0x80>
 80044d6:	4a29      	ldr	r2, [pc, #164]	; (800457c <inc_lock+0x118>)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	4413      	add	r3, r2
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f2      	bne.n	80044ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d101      	bne.n	80044ee <inc_lock+0x8a>
 80044ea:	2300      	movs	r3, #0
 80044ec:	e040      	b.n	8004570 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4922      	ldr	r1, [pc, #136]	; (800457c <inc_lock+0x118>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	440b      	add	r3, r1
 80044fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	491e      	ldr	r1, [pc, #120]	; (800457c <inc_lock+0x118>)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	440b      	add	r3, r1
 8004508:	3304      	adds	r3, #4
 800450a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	491a      	ldr	r1, [pc, #104]	; (800457c <inc_lock+0x118>)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	440b      	add	r3, r1
 8004518:	3308      	adds	r3, #8
 800451a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <inc_lock+0x118>)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	4413      	add	r3, r2
 8004524:	330c      	adds	r3, #12
 8004526:	2200      	movs	r2, #0
 8004528:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <inc_lock+0xe0>
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <inc_lock+0x118>)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	4413      	add	r3, r2
 8004538:	330c      	adds	r3, #12
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <inc_lock+0xe0>
 8004540:	2300      	movs	r3, #0
 8004542:	e015      	b.n	8004570 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d108      	bne.n	800455c <inc_lock+0xf8>
 800454a:	4a0c      	ldr	r2, [pc, #48]	; (800457c <inc_lock+0x118>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	4413      	add	r3, r2
 8004552:	330c      	adds	r3, #12
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	3301      	adds	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	e001      	b.n	8004560 <inc_lock+0xfc>
 800455c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004560:	4906      	ldr	r1, [pc, #24]	; (800457c <inc_lock+0x118>)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	440b      	add	r3, r1
 8004568:	330c      	adds	r3, #12
 800456a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3301      	adds	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	2000004c 	.word	0x2000004c

08004580 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d825      	bhi.n	80045e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <dec_lock+0x74>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	4413      	add	r3, r2
 800459c:	330c      	adds	r3, #12
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80045a2:	89fb      	ldrh	r3, [r7, #14]
 80045a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a8:	d101      	bne.n	80045ae <dec_lock+0x2e>
 80045aa:	2300      	movs	r3, #0
 80045ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80045ae:	89fb      	ldrh	r3, [r7, #14]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <dec_lock+0x3a>
 80045b4:	89fb      	ldrh	r3, [r7, #14]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80045ba:	4a0e      	ldr	r2, [pc, #56]	; (80045f4 <dec_lock+0x74>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	4413      	add	r3, r2
 80045c2:	330c      	adds	r3, #12
 80045c4:	89fa      	ldrh	r2, [r7, #14]
 80045c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <dec_lock+0x5a>
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <dec_lock+0x74>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	737b      	strb	r3, [r7, #13]
 80045de:	e001      	b.n	80045e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80045e0:	2302      	movs	r3, #2
 80045e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80045e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000004c 	.word	0x2000004c

080045f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e010      	b.n	8004628 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004606:	4a0d      	ldr	r2, [pc, #52]	; (800463c <clear_lock+0x44>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	4413      	add	r3, r2
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d105      	bne.n	8004622 <clear_lock+0x2a>
 8004616:	4a09      	ldr	r2, [pc, #36]	; (800463c <clear_lock+0x44>)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	4413      	add	r3, r2
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3301      	adds	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d9eb      	bls.n	8004606 <clear_lock+0xe>
	}
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	2000004c 	.word	0x2000004c

08004640 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	78db      	ldrb	r3, [r3, #3]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d034      	beq.n	80046be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7858      	ldrb	r0, [r3, #1]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004664:	2301      	movs	r3, #1
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	f7ff fd40 	bl	80040ec <disk_write>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e022      	b.n	80046be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	1ad2      	subs	r2, r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	429a      	cmp	r2, r3
 800468c:	d217      	bcs.n	80046be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	789b      	ldrb	r3, [r3, #2]
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	e010      	b.n	80046b8 <sync_window+0x78>
					wsect += fs->fsize;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4413      	add	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	7858      	ldrb	r0, [r3, #1]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046aa:	2301      	movs	r3, #1
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	f7ff fd1d 	bl	80040ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d8eb      	bhi.n	8004696 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d01b      	beq.n	8004718 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ffad 	bl	8004640 <sync_window>
 80046e6:	4603      	mov	r3, r0
 80046e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d113      	bne.n	8004718 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	7858      	ldrb	r0, [r3, #1]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046fa:	2301      	movs	r3, #1
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	f7ff fcd5 	bl	80040ac <disk_read>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff87 	bl	8004640 <sync_window>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d158      	bne.n	80047ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d148      	bne.n	80047d6 <sync_fs+0xb2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	791b      	ldrb	r3, [r3, #4]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d144      	bne.n	80047d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3330      	adds	r3, #48	; 0x30
 8004750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fda9 	bl	80042ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3330      	adds	r3, #48	; 0x30
 8004760:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004764:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fd38 	bl	80041de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3330      	adds	r3, #48	; 0x30
 8004772:	4921      	ldr	r1, [pc, #132]	; (80047f8 <sync_fs+0xd4>)
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fd4d 	bl	8004214 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3330      	adds	r3, #48	; 0x30
 800477e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004782:	491e      	ldr	r1, [pc, #120]	; (80047fc <sync_fs+0xd8>)
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fd45 	bl	8004214 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3330      	adds	r3, #48	; 0x30
 800478e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7ff fd3b 	bl	8004214 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3330      	adds	r3, #48	; 0x30
 80047a2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7ff fd31 	bl	8004214 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7858      	ldrb	r0, [r3, #1]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	2301      	movs	r3, #1
 80047cc:	f7ff fc8e 	bl	80040ec <disk_write>
			fs->fsi_flag = 0;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fca4 	bl	800412c <disk_ioctl>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <sync_fs+0xca>
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	41615252 	.word	0x41615252
 80047fc:	61417272 	.word	0x61417272

08004800 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	3b02      	subs	r3, #2
 800480e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	3b02      	subs	r3, #2
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d301      	bcc.n	8004820 <clust2sect+0x20>
 800481c:	2300      	movs	r3, #0
 800481e:	e008      	b.n	8004832 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	895b      	ldrh	r3, [r3, #10]
 8004824:	461a      	mov	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	fb03 f202 	mul.w	r2, r3, r2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	4413      	add	r3, r2
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d904      	bls.n	800485e <get_fat+0x20>
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <get_fat+0x26>
		val = 1;	/* Internal error */
 800485e:	2301      	movs	r3, #1
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e08f      	b.n	8004984 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004864:	f04f 33ff 	mov.w	r3, #4294967295
 8004868:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b03      	cmp	r3, #3
 8004870:	d062      	beq.n	8004938 <get_fat+0xfa>
 8004872:	2b03      	cmp	r3, #3
 8004874:	dc7c      	bgt.n	8004970 <get_fat+0x132>
 8004876:	2b01      	cmp	r3, #1
 8004878:	d002      	beq.n	8004880 <get_fat+0x42>
 800487a:	2b02      	cmp	r3, #2
 800487c:	d042      	beq.n	8004904 <get_fat+0xc6>
 800487e:	e077      	b.n	8004970 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6a1a      	ldr	r2, [r3, #32]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0a5b      	lsrs	r3, r3, #9
 8004896:	4413      	add	r3, r2
 8004898:	4619      	mov	r1, r3
 800489a:	6938      	ldr	r0, [r7, #16]
 800489c:	f7ff ff14 	bl	80046c8 <move_window>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d167      	bne.n	8004976 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	60fa      	str	r2, [r7, #12]
 80048ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	0a5b      	lsrs	r3, r3, #9
 80048c2:	4413      	add	r3, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	6938      	ldr	r0, [r7, #16]
 80048c8:	f7ff fefe 	bl	80046c8 <move_window>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d153      	bne.n	800497a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <get_fat+0xbc>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	e002      	b.n	8004900 <get_fat+0xc2>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004900:	617b      	str	r3, [r7, #20]
			break;
 8004902:	e03f      	b.n	8004984 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	4413      	add	r3, r2
 800490e:	4619      	mov	r1, r3
 8004910:	6938      	ldr	r0, [r7, #16]
 8004912:	f7ff fed9 	bl	80046c8 <move_window>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d130      	bne.n	800497e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800492a:	4413      	add	r3, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fc1b 	bl	8004168 <ld_word>
 8004932:	4603      	mov	r3, r0
 8004934:	617b      	str	r3, [r7, #20]
			break;
 8004936:	e025      	b.n	8004984 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	09db      	lsrs	r3, r3, #7
 8004940:	4413      	add	r3, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6938      	ldr	r0, [r7, #16]
 8004946:	f7ff febf 	bl	80046c8 <move_window>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d118      	bne.n	8004982 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800495e:	4413      	add	r3, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fc19 	bl	8004198 <ld_dword>
 8004966:	4603      	mov	r3, r0
 8004968:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800496c:	617b      	str	r3, [r7, #20]
			break;
 800496e:	e009      	b.n	8004984 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e006      	b.n	8004984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004976:	bf00      	nop
 8004978:	e004      	b.n	8004984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004982:	bf00      	nop
		}
	}

	return val;
 8004984:	697b      	ldr	r3, [r7, #20]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800498e:	b590      	push	{r4, r7, lr}
 8004990:	b089      	sub	sp, #36	; 0x24
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800499a:	2302      	movs	r3, #2
 800499c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f240 80d2 	bls.w	8004b4a <put_fat+0x1bc>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	f080 80cc 	bcs.w	8004b4a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	f000 8096 	beq.w	8004ae8 <put_fat+0x15a>
 80049bc:	2b03      	cmp	r3, #3
 80049be:	f300 80cd 	bgt.w	8004b5c <put_fat+0x1ce>
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d002      	beq.n	80049cc <put_fat+0x3e>
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d06e      	beq.n	8004aa8 <put_fat+0x11a>
 80049ca:	e0c7      	b.n	8004b5c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4413      	add	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	0a5b      	lsrs	r3, r3, #9
 80049e2:	4413      	add	r3, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fe6e 	bl	80046c8 <move_window>
 80049ec:	4603      	mov	r3, r0
 80049ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049f0:	7ffb      	ldrb	r3, [r7, #31]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f040 80ab 	bne.w	8004b4e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	1c59      	adds	r1, r3, #1
 8004a02:	61b9      	str	r1, [r7, #24]
 8004a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a08:	4413      	add	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <put_fat+0xa4>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	b25a      	sxtb	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	b25b      	sxtb	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e001      	b.n	8004a36 <put_fat+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1a      	ldr	r2, [r3, #32]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	0a5b      	lsrs	r3, r3, #9
 8004a48:	4413      	add	r3, r2
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff fe3b 	bl	80046c8 <move_window>
 8004a52:	4603      	mov	r3, r0
 8004a54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d17a      	bne.n	8004b52 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a68:	4413      	add	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <put_fat+0xf0>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e00e      	b.n	8004a9c <put_fat+0x10e>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	f023 030f 	bic.w	r3, r3, #15
 8004a88:	b25a      	sxtb	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	b25b      	sxtb	r3, r3
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	4313      	orrs	r3, r2
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	70da      	strb	r2, [r3, #3]
			break;
 8004aa6:	e059      	b.n	8004b5c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1a      	ldr	r2, [r3, #32]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff fe07 	bl	80046c8 <move_window>
 8004aba:	4603      	mov	r3, r0
 8004abc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004abe:	7ffb      	ldrb	r3, [r7, #31]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d148      	bne.n	8004b56 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004ad2:	4413      	add	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fb7f 	bl	80041de <st_word>
			fs->wflag = 1;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	70da      	strb	r2, [r3, #3]
			break;
 8004ae6:	e039      	b.n	8004b5c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	09db      	lsrs	r3, r3, #7
 8004af0:	4413      	add	r3, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff fde7 	bl	80046c8 <move_window>
 8004afa:	4603      	mov	r3, r0
 8004afc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d12a      	bne.n	8004b5a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b18:	4413      	add	r3, r2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fb3c 	bl	8004198 <ld_dword>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b26:	4323      	orrs	r3, r4
 8004b28:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b38:	4413      	add	r3, r2
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fb69 	bl	8004214 <st_dword>
			fs->wflag = 1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	70da      	strb	r2, [r3, #3]
			break;
 8004b48:	e008      	b.n	8004b5c <put_fat+0x1ce>
		}
	}
 8004b4a:	bf00      	nop
 8004b4c:	e006      	b.n	8004b5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004b4e:	bf00      	nop
 8004b50:	e004      	b.n	8004b5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004b5a:	bf00      	nop
	return res;
 8004b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3724      	adds	r7, #36	; 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd90      	pop	{r4, r7, pc}

08004b66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b088      	sub	sp, #32
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d904      	bls.n	8004b8c <remove_chain+0x26>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d301      	bcc.n	8004b90 <remove_chain+0x2a>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e04b      	b.n	8004c28 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004b96:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	69b8      	ldr	r0, [r7, #24]
 8004b9e:	f7ff fef6 	bl	800498e <put_fat>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004ba6:	7ffb      	ldrb	r3, [r7, #31]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <remove_chain+0x4a>
 8004bac:	7ffb      	ldrb	r3, [r7, #31]
 8004bae:	e03b      	b.n	8004c28 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fe43 	bl	800483e <get_fat>
 8004bb8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d031      	beq.n	8004c24 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <remove_chain+0x64>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e02e      	b.n	8004c28 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d101      	bne.n	8004bd6 <remove_chain+0x70>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e028      	b.n	8004c28 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	69b8      	ldr	r0, [r7, #24]
 8004bdc:	f7ff fed7 	bl	800498e <put_fat>
 8004be0:	4603      	mov	r3, r0
 8004be2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004be4:	7ffb      	ldrb	r3, [r7, #31]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <remove_chain+0x88>
 8004bea:	7ffb      	ldrb	r3, [r7, #31]
 8004bec:	e01c      	b.n	8004c28 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	3b02      	subs	r3, #2
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d20b      	bcs.n	8004c14 <remove_chain+0xae>
			fs->free_clst++;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	791b      	ldrb	r3, [r3, #4]
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d3c6      	bcc.n	8004bb0 <remove_chain+0x4a>
 8004c22:	e000      	b.n	8004c26 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004c24:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d004      	beq.n	8004c5c <create_chain+0x2c>
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d31b      	bcc.n	8004c94 <create_chain+0x64>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e018      	b.n	8004c94 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fdea 	bl	800483e <get_fat>
 8004c6a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d801      	bhi.n	8004c76 <create_chain+0x46>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e070      	b.n	8004d58 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d101      	bne.n	8004c82 <create_chain+0x52>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	e06a      	b.n	8004d58 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d201      	bcs.n	8004c90 <create_chain+0x60>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	e063      	b.n	8004d58 <create_chain+0x128>
		scl = clst;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d307      	bcc.n	8004cb8 <create_chain+0x88>
				ncl = 2;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d901      	bls.n	8004cb8 <create_chain+0x88>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e04f      	b.n	8004d58 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004cb8:	69f9      	ldr	r1, [r7, #28]
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fdbf 	bl	800483e <get_fat>
 8004cc0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00e      	beq.n	8004ce6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d003      	beq.n	8004cd6 <create_chain+0xa6>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d101      	bne.n	8004cda <create_chain+0xaa>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	e03e      	b.n	8004d58 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d1da      	bne.n	8004c98 <create_chain+0x68>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e038      	b.n	8004d58 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004ce6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cec:	69f9      	ldr	r1, [r7, #28]
 8004cee:	6938      	ldr	r0, [r7, #16]
 8004cf0:	f7ff fe4d 	bl	800498e <put_fat>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <create_chain+0xe2>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	6938      	ldr	r0, [r7, #16]
 8004d0a:	f7ff fe40 	bl	800498e <put_fat>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d116      	bne.n	8004d46 <create_chain+0x116>
		fs->last_clst = ncl;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	3b02      	subs	r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d804      	bhi.n	8004d36 <create_chain+0x106>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	1e5a      	subs	r2, r3, #1
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	791b      	ldrb	r3, [r3, #4]
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	711a      	strb	r2, [r3, #4]
 8004d44:	e007      	b.n	8004d56 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d102      	bne.n	8004d52 <create_chain+0x122>
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d50:	e000      	b.n	8004d54 <create_chain+0x124>
 8004d52:	2301      	movs	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004d56:	69fb      	ldr	r3, [r7, #28]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	3304      	adds	r3, #4
 8004d76:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	0a5b      	lsrs	r3, r3, #9
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	8952      	ldrh	r2, [r2, #10]
 8004d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1d1a      	adds	r2, r3, #4
 8004d8a:	613a      	str	r2, [r7, #16]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <clmt_clust+0x3a>
 8004d96:	2300      	movs	r3, #0
 8004d98:	e010      	b.n	8004dbc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d307      	bcc.n	8004db2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3304      	adds	r3, #4
 8004dae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004db0:	e7e9      	b.n	8004d86 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004db2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dde:	d204      	bcs.n	8004dea <dir_sdi+0x22>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <dir_sdi+0x26>
		return FR_INT_ERR;
 8004dea:	2302      	movs	r3, #2
 8004dec:	e063      	b.n	8004eb6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <dir_sdi+0x46>
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d902      	bls.n	8004e0e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10c      	bne.n	8004e2e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	8912      	ldrh	r2, [r2, #8]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d301      	bcc.n	8004e24 <dir_sdi+0x5c>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e048      	b.n	8004eb6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	61da      	str	r2, [r3, #28]
 8004e2c:	e029      	b.n	8004e82 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	895b      	ldrh	r3, [r3, #10]
 8004e32:	025b      	lsls	r3, r3, #9
 8004e34:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e36:	e019      	b.n	8004e6c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6979      	ldr	r1, [r7, #20]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fcfe 	bl	800483e <get_fat>
 8004e42:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d101      	bne.n	8004e50 <dir_sdi+0x88>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e032      	b.n	8004eb6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d904      	bls.n	8004e60 <dir_sdi+0x98>
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d301      	bcc.n	8004e64 <dir_sdi+0x9c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e028      	b.n	8004eb6 <dir_sdi+0xee>
			ofs -= csz;
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d2e1      	bcs.n	8004e38 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004e74:	6979      	ldr	r1, [r7, #20]
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f7ff fcc2 	bl	8004800 <clust2sect>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <dir_sdi+0xcc>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e010      	b.n	8004eb6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	0a5b      	lsrs	r3, r3, #9
 8004e9c:	441a      	add	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	441a      	add	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	3320      	adds	r3, #32
 8004ed4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <dir_next+0x28>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee4:	d301      	bcc.n	8004eea <dir_next+0x2c>
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	e0aa      	b.n	8005040 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 8098 	bne.w	8005026 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	8912      	ldrh	r2, [r2, #8]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	f0c0 8088 	bcc.w	8005026 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	61da      	str	r2, [r3, #28]
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	e08f      	b.n	8005040 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	0a5b      	lsrs	r3, r3, #9
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	8952      	ldrh	r2, [r2, #10]
 8004f28:	3a01      	subs	r2, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d17a      	bne.n	8005026 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f7ff fc80 	bl	800483e <get_fat>
 8004f3e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d801      	bhi.n	8004f4a <dir_next+0x8c>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e07a      	b.n	8005040 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d101      	bne.n	8004f56 <dir_next+0x98>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e074      	b.n	8005040 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d358      	bcc.n	8005012 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	61da      	str	r2, [r3, #28]
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	e067      	b.n	8005040 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7ff fe59 	bl	8004c30 <create_chain>
 8004f7e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <dir_next+0xcc>
 8004f86:	2307      	movs	r3, #7
 8004f88:	e05a      	b.n	8005040 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <dir_next+0xd6>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e055      	b.n	8005040 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d101      	bne.n	8004fa0 <dir_next+0xe2>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e04f      	b.n	8005040 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7ff fb4d 	bl	8004640 <sync_window>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <dir_next+0xf2>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e047      	b.n	8005040 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3330      	adds	r3, #48	; 0x30
 8004fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff f977 	bl	80042ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	6979      	ldr	r1, [r7, #20]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f7ff fc1a 	bl	8004800 <clust2sect>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fd2:	e012      	b.n	8004ffa <dir_next+0x13c>
						fs->wflag = 1;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff fb30 	bl	8004640 <sync_window>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <dir_next+0x12c>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e02a      	b.n	8005040 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3301      	adds	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	895b      	ldrh	r3, [r3, #10]
 8004ffe:	461a      	mov	r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4293      	cmp	r3, r2
 8005004:	d3e6      	bcc.n	8004fd4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad2      	subs	r2, r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff fbf0 	bl	8004800 <clust2sect>
 8005020:	4602      	mov	r2, r0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005058:	2100      	movs	r1, #0
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff feb4 	bl	8004dc8 <dir_sdi>
 8005060:	4603      	mov	r3, r0
 8005062:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d12b      	bne.n	80050c2 <dir_alloc+0x7a>
		n = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	4619      	mov	r1, r3
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff fb27 	bl	80046c8 <move_window>
 800507a:	4603      	mov	r3, r0
 800507c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d11d      	bne.n	80050c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2be5      	cmp	r3, #229	; 0xe5
 800508c:	d004      	beq.n	8005098 <dir_alloc+0x50>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	3301      	adds	r3, #1
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d102      	bne.n	80050ac <dir_alloc+0x64>
 80050a6:	e00c      	b.n	80050c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80050ac:	2101      	movs	r1, #1
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff ff05 	bl	8004ebe <dir_next>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0d7      	beq.n	800506e <dir_alloc+0x26>
 80050be:	e000      	b.n	80050c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80050c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d101      	bne.n	80050cc <dir_alloc+0x84>
 80050c8:	2307      	movs	r3, #7
 80050ca:	75fb      	strb	r3, [r7, #23]
	return res;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	331a      	adds	r3, #26
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff f83f 	bl	8004168 <ld_word>
 80050ea:	4603      	mov	r3, r0
 80050ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d109      	bne.n	800510a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff f834 	bl	8004168 <ld_word>
 8005100:	4603      	mov	r3, r0
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	331a      	adds	r3, #26
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	b292      	uxth	r2, r2
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff f857 	bl	80041de <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d109      	bne.n	800514c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f103 0214 	add.w	r2, r3, #20
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	b29b      	uxth	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f7ff f849 	bl	80041de <st_word>
	}
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005162:	2100      	movs	r1, #0
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff fe2f 	bl	8004dc8 <dir_sdi>
 800516a:	4603      	mov	r3, r0
 800516c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <dir_find+0x24>
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	e03e      	b.n	80051f6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	4619      	mov	r1, r3
 800517e:	6938      	ldr	r0, [r7, #16]
 8005180:	f7ff faa2 	bl	80046c8 <move_window>
 8005184:	4603      	mov	r3, r0
 8005186:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d12f      	bne.n	80051ee <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <dir_find+0x4e>
 800519c:	2304      	movs	r3, #4
 800519e:	75fb      	strb	r3, [r7, #23]
 80051a0:	e028      	b.n	80051f4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	330b      	adds	r3, #11
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	330b      	adds	r3, #11
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <dir_find+0x86>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a18      	ldr	r0, [r3, #32]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3324      	adds	r3, #36	; 0x24
 80051cc:	220b      	movs	r2, #11
 80051ce:	4619      	mov	r1, r3
 80051d0:	f7ff f888 	bl	80042e4 <mem_cmp>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80051da:	2100      	movs	r1, #0
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fe6e 	bl	8004ebe <dir_next>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0c5      	beq.n	8005178 <dir_find+0x24>
 80051ec:	e002      	b.n	80051f4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80051f2:	bf00      	nop

	return res;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800520c:	2101      	movs	r1, #1
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff ff1a 	bl	8005048 <dir_alloc>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11c      	bne.n	8005258 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	4619      	mov	r1, r3
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	f7ff fa4f 	bl	80046c8 <move_window>
 800522a:	4603      	mov	r3, r0
 800522c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d111      	bne.n	8005258 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	2220      	movs	r2, #32
 800523a:	2100      	movs	r1, #0
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff f836 	bl	80042ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a18      	ldr	r0, [r3, #32]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3324      	adds	r3, #36	; 0x24
 800524a:	220b      	movs	r2, #11
 800524c:	4619      	mov	r1, r3
 800524e:	f7ff f80d 	bl	800426c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2201      	movs	r2, #1
 8005256:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3324      	adds	r3, #36	; 0x24
 8005278:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800527a:	220b      	movs	r2, #11
 800527c:	2120      	movs	r1, #32
 800527e:	68b8      	ldr	r0, [r7, #8]
 8005280:	f7ff f815 	bl	80042ae <mem_set>
	si = i = 0; ni = 8;
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	2308      	movs	r3, #8
 800528e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	61fa      	str	r2, [r7, #28]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800529e:	7efb      	ldrb	r3, [r7, #27]
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d94e      	bls.n	8005342 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80052a4:	7efb      	ldrb	r3, [r7, #27]
 80052a6:	2b2f      	cmp	r3, #47	; 0x2f
 80052a8:	d006      	beq.n	80052b8 <create_name+0x54>
 80052aa:	7efb      	ldrb	r3, [r7, #27]
 80052ac:	2b5c      	cmp	r3, #92	; 0x5c
 80052ae:	d110      	bne.n	80052d2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80052b0:	e002      	b.n	80052b8 <create_name+0x54>
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3301      	adds	r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b2f      	cmp	r3, #47	; 0x2f
 80052c2:	d0f6      	beq.n	80052b2 <create_name+0x4e>
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b5c      	cmp	r3, #92	; 0x5c
 80052ce:	d0f0      	beq.n	80052b2 <create_name+0x4e>
			break;
 80052d0:	e038      	b.n	8005344 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80052d2:	7efb      	ldrb	r3, [r7, #27]
 80052d4:	2b2e      	cmp	r3, #46	; 0x2e
 80052d6:	d003      	beq.n	80052e0 <create_name+0x7c>
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d30c      	bcc.n	80052fa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2b0b      	cmp	r3, #11
 80052e4:	d002      	beq.n	80052ec <create_name+0x88>
 80052e6:	7efb      	ldrb	r3, [r7, #27]
 80052e8:	2b2e      	cmp	r3, #46	; 0x2e
 80052ea:	d001      	beq.n	80052f0 <create_name+0x8c>
 80052ec:	2306      	movs	r3, #6
 80052ee:	e044      	b.n	800537a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80052f0:	2308      	movs	r3, #8
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	230b      	movs	r3, #11
 80052f6:	617b      	str	r3, [r7, #20]
			continue;
 80052f8:	e022      	b.n	8005340 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80052fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da04      	bge.n	800530c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005302:	7efb      	ldrb	r3, [r7, #27]
 8005304:	3b80      	subs	r3, #128	; 0x80
 8005306:	4a1f      	ldr	r2, [pc, #124]	; (8005384 <create_name+0x120>)
 8005308:	5cd3      	ldrb	r3, [r2, r3]
 800530a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800530c:	7efb      	ldrb	r3, [r7, #27]
 800530e:	4619      	mov	r1, r3
 8005310:	481d      	ldr	r0, [pc, #116]	; (8005388 <create_name+0x124>)
 8005312:	f7ff f80e 	bl	8004332 <chk_chr>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <create_name+0xbc>
 800531c:	2306      	movs	r3, #6
 800531e:	e02c      	b.n	800537a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005320:	7efb      	ldrb	r3, [r7, #27]
 8005322:	2b60      	cmp	r3, #96	; 0x60
 8005324:	d905      	bls.n	8005332 <create_name+0xce>
 8005326:	7efb      	ldrb	r3, [r7, #27]
 8005328:	2b7a      	cmp	r3, #122	; 0x7a
 800532a:	d802      	bhi.n	8005332 <create_name+0xce>
 800532c:	7efb      	ldrb	r3, [r7, #27]
 800532e:	3b20      	subs	r3, #32
 8005330:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	613a      	str	r2, [r7, #16]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	4413      	add	r3, r2
 800533c:	7efa      	ldrb	r2, [r7, #27]
 800533e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005340:	e7a6      	b.n	8005290 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005342:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	441a      	add	r2, r3
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <create_name+0xf4>
 8005354:	2306      	movs	r3, #6
 8005356:	e010      	b.n	800537a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2be5      	cmp	r3, #229	; 0xe5
 800535e:	d102      	bne.n	8005366 <create_name+0x102>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2205      	movs	r2, #5
 8005364:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005366:	7efb      	ldrb	r3, [r7, #27]
 8005368:	2b20      	cmp	r3, #32
 800536a:	d801      	bhi.n	8005370 <create_name+0x10c>
 800536c:	2204      	movs	r2, #4
 800536e:	e000      	b.n	8005372 <create_name+0x10e>
 8005370:	2200      	movs	r2, #0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	330b      	adds	r3, #11
 8005376:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005378:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800537a:	4618      	mov	r0, r3
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	08006930 	.word	0x08006930
 8005388:	080068a4 	.word	0x080068a4

0800538c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80053a0:	e002      	b.n	80053a8 <follow_path+0x1c>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b2f      	cmp	r3, #47	; 0x2f
 80053ae:	d0f8      	beq.n	80053a2 <follow_path+0x16>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b5c      	cmp	r3, #92	; 0x5c
 80053b6:	d0f4      	beq.n	80053a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2200      	movs	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b1f      	cmp	r3, #31
 80053c4:	d80a      	bhi.n	80053dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2280      	movs	r2, #128	; 0x80
 80053ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80053ce:	2100      	movs	r1, #0
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fcf9 	bl	8004dc8 <dir_sdi>
 80053d6:	4603      	mov	r3, r0
 80053d8:	75fb      	strb	r3, [r7, #23]
 80053da:	e043      	b.n	8005464 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053dc:	463b      	mov	r3, r7
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ff3f 	bl	8005264 <create_name>
 80053e6:	4603      	mov	r3, r0
 80053e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d134      	bne.n	800545a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff feaf 	bl	8005154 <dir_find>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005400:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d127      	bne.n	800545e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d122      	bne.n	800545e <follow_path+0xd2>
 8005418:	2305      	movs	r3, #5
 800541a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800541c:	e01f      	b.n	800545e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800541e:	7afb      	ldrb	r3, [r7, #11]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d11c      	bne.n	8005462 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	799b      	ldrb	r3, [r3, #6]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005434:	2305      	movs	r3, #5
 8005436:	75fb      	strb	r3, [r7, #23]
 8005438:	e014      	b.n	8005464 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005448:	4413      	add	r3, r2
 800544a:	4619      	mov	r1, r3
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fe42 	bl	80050d6 <ld_clust>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005458:	e7c0      	b.n	80053dc <follow_path+0x50>
			if (res != FR_OK) break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <follow_path+0xd8>
				break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005462:	bf00      	nop
			}
		}
	}

	return res;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800546e:	b480      	push	{r7}
 8005470:	b087      	sub	sp, #28
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005476:	f04f 33ff 	mov.w	r3, #4294967295
 800547a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d031      	beq.n	80054e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e002      	b.n	8005492 <get_ldnumber+0x24>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	3301      	adds	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b20      	cmp	r3, #32
 8005498:	d903      	bls.n	80054a2 <get_ldnumber+0x34>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b3a      	cmp	r3, #58	; 0x3a
 80054a0:	d1f4      	bne.n	800548c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b3a      	cmp	r3, #58	; 0x3a
 80054a8:	d11c      	bne.n	80054e4 <get_ldnumber+0x76>
			tp = *path;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	60fa      	str	r2, [r7, #12]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	3b30      	subs	r3, #48	; 0x30
 80054ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d80e      	bhi.n	80054e0 <get_ldnumber+0x72>
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d10a      	bne.n	80054e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d107      	bne.n	80054e0 <get_ldnumber+0x72>
					vol = (int)i;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	3301      	adds	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	e002      	b.n	80054ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80054e8:	693b      	ldr	r3, [r7, #16]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	70da      	strb	r2, [r3, #3]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f04f 32ff 	mov.w	r2, #4294967295
 800550e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff f8d8 	bl	80046c8 <move_window>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <check_fs+0x2a>
 800551e:	2304      	movs	r3, #4
 8005520:	e038      	b.n	8005594 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3330      	adds	r3, #48	; 0x30
 8005526:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe fe1c 	bl	8004168 <ld_word>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <check_fs+0x48>
 800553c:	2303      	movs	r3, #3
 800553e:	e029      	b.n	8005594 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005546:	2be9      	cmp	r3, #233	; 0xe9
 8005548:	d009      	beq.n	800555e <check_fs+0x66>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005550:	2beb      	cmp	r3, #235	; 0xeb
 8005552:	d11e      	bne.n	8005592 <check_fs+0x9a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800555a:	2b90      	cmp	r3, #144	; 0x90
 800555c:	d119      	bne.n	8005592 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3330      	adds	r3, #48	; 0x30
 8005562:	3336      	adds	r3, #54	; 0x36
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe fe17 	bl	8004198 <ld_dword>
 800556a:	4603      	mov	r3, r0
 800556c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005570:	4a0a      	ldr	r2, [pc, #40]	; (800559c <check_fs+0xa4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d101      	bne.n	800557a <check_fs+0x82>
 8005576:	2300      	movs	r3, #0
 8005578:	e00c      	b.n	8005594 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3330      	adds	r3, #48	; 0x30
 800557e:	3352      	adds	r3, #82	; 0x52
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe fe09 	bl	8004198 <ld_dword>
 8005586:	4603      	mov	r3, r0
 8005588:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <check_fs+0xa8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d101      	bne.n	8005592 <check_fs+0x9a>
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005592:	2302      	movs	r3, #2
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	00544146 	.word	0x00544146
 80055a0:	33544146 	.word	0x33544146

080055a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b096      	sub	sp, #88	; 0x58
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	4613      	mov	r3, r2
 80055b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff ff58 	bl	800546e <get_ldnumber>
 80055be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80055c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da01      	bge.n	80055ca <find_volume+0x26>
 80055c6:	230b      	movs	r3, #11
 80055c8:	e22e      	b.n	8005a28 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80055ca:	4aa8      	ldr	r2, [pc, #672]	; (800586c <find_volume+0x2c8>)
 80055cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <find_volume+0x3a>
 80055da:	230c      	movs	r3, #12
 80055dc:	e224      	b.n	8005a28 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01a      	beq.n	800562a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe fd17 	bl	800402c <disk_status>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10c      	bne.n	800562a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <find_volume+0x82>
 8005616:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005622:	230a      	movs	r3, #10
 8005624:	e200      	b.n	8005a28 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8005626:	2300      	movs	r3, #0
 8005628:	e1fe      	b.n	8005a28 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005632:	b2da      	uxtb	r2, r3
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe fd0f 	bl	8004060 <disk_initialize>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005654:	2303      	movs	r3, #3
 8005656:	e1e7      	b.n	8005a28 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <find_volume+0xca>
 800565e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800566a:	230a      	movs	r3, #10
 800566c:	e1dc      	b.n	8005a28 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005672:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005674:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005676:	f7ff ff3f 	bl	80054f8 <check_fs>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005684:	2b02      	cmp	r3, #2
 8005686:	d14b      	bne.n	8005720 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005688:	2300      	movs	r3, #0
 800568a:	643b      	str	r3, [r7, #64]	; 0x40
 800568c:	e01f      	b.n	80056ce <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800569c:	4413      	add	r3, r2
 800569e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	3304      	adds	r3, #4
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d006      	beq.n	80056b8 <find_volume+0x114>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	3308      	adds	r3, #8
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fd72 	bl	8004198 <ld_dword>
 80056b4:	4602      	mov	r2, r0
 80056b6:	e000      	b.n	80056ba <find_volume+0x116>
 80056b8:	2200      	movs	r2, #0
 80056ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80056c2:	440b      	add	r3, r1
 80056c4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80056c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ca:	3301      	adds	r3, #1
 80056cc:	643b      	str	r3, [r7, #64]	; 0x40
 80056ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d9dc      	bls.n	800568e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80056d4:	2300      	movs	r3, #0
 80056d6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80056d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <find_volume+0x140>
 80056de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e0:	3b01      	subs	r3, #1
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80056e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80056ec:	4413      	add	r3, r2
 80056ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80056f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80056f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <find_volume+0x162>
 80056fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056fe:	f7ff fefb 	bl	80054f8 <check_fs>
 8005702:	4603      	mov	r3, r0
 8005704:	e000      	b.n	8005708 <find_volume+0x164>
 8005706:	2303      	movs	r3, #3
 8005708:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800570c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005710:	2b01      	cmp	r3, #1
 8005712:	d905      	bls.n	8005720 <find_volume+0x17c>
 8005714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005716:	3301      	adds	r3, #1
 8005718:	643b      	str	r3, [r7, #64]	; 0x40
 800571a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571c:	2b03      	cmp	r3, #3
 800571e:	d9e1      	bls.n	80056e4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005724:	2b04      	cmp	r3, #4
 8005726:	d101      	bne.n	800572c <find_volume+0x188>
 8005728:	2301      	movs	r3, #1
 800572a:	e17d      	b.n	8005a28 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800572c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005730:	2b01      	cmp	r3, #1
 8005732:	d901      	bls.n	8005738 <find_volume+0x194>
 8005734:	230d      	movs	r3, #13
 8005736:	e177      	b.n	8005a28 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	3330      	adds	r3, #48	; 0x30
 800573c:	330b      	adds	r3, #11
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fd12 	bl	8004168 <ld_word>
 8005744:	4603      	mov	r3, r0
 8005746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574a:	d001      	beq.n	8005750 <find_volume+0x1ac>
 800574c:	230d      	movs	r3, #13
 800574e:	e16b      	b.n	8005a28 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	3330      	adds	r3, #48	; 0x30
 8005754:	3316      	adds	r3, #22
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe fd06 	bl	8004168 <ld_word>
 800575c:	4603      	mov	r3, r0
 800575e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <find_volume+0x1d0>
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	3330      	adds	r3, #48	; 0x30
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fd13 	bl	8004198 <ld_dword>
 8005772:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005778:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	789b      	ldrb	r3, [r3, #2]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d005      	beq.n	8005798 <find_volume+0x1f4>
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	789b      	ldrb	r3, [r3, #2]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d001      	beq.n	8005798 <find_volume+0x1f4>
 8005794:	230d      	movs	r3, #13
 8005796:	e147      	b.n	8005a28 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	789b      	ldrb	r3, [r3, #2]
 800579c:	461a      	mov	r2, r3
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	895b      	ldrh	r3, [r3, #10]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <find_volume+0x228>
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	895b      	ldrh	r3, [r3, #10]
 80057be:	461a      	mov	r2, r3
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	895b      	ldrh	r3, [r3, #10]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <find_volume+0x22c>
 80057cc:	230d      	movs	r3, #13
 80057ce:	e12b      	b.n	8005a28 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	3330      	adds	r3, #48	; 0x30
 80057d4:	3311      	adds	r3, #17
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fcc6 	bl	8004168 <ld_word>
 80057dc:	4603      	mov	r3, r0
 80057de:	461a      	mov	r2, r3
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	891b      	ldrh	r3, [r3, #8]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <find_volume+0x252>
 80057f2:	230d      	movs	r3, #13
 80057f4:	e118      	b.n	8005a28 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	3330      	adds	r3, #48	; 0x30
 80057fa:	3313      	adds	r3, #19
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe fcb3 	bl	8004168 <ld_word>
 8005802:	4603      	mov	r3, r0
 8005804:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <find_volume+0x276>
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	3330      	adds	r3, #48	; 0x30
 8005810:	3320      	adds	r3, #32
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe fcc0 	bl	8004198 <ld_dword>
 8005818:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	3330      	adds	r3, #48	; 0x30
 800581e:	330e      	adds	r3, #14
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe fca1 	bl	8004168 <ld_word>
 8005826:	4603      	mov	r3, r0
 8005828:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800582a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <find_volume+0x290>
 8005830:	230d      	movs	r3, #13
 8005832:	e0f9      	b.n	8005a28 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005834:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005838:	4413      	add	r3, r2
 800583a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800583c:	8912      	ldrh	r2, [r2, #8]
 800583e:	0912      	lsrs	r2, r2, #4
 8005840:	b292      	uxth	r2, r2
 8005842:	4413      	add	r3, r2
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	429a      	cmp	r2, r3
 800584c:	d201      	bcs.n	8005852 <find_volume+0x2ae>
 800584e:	230d      	movs	r3, #13
 8005850:	e0ea      	b.n	8005a28 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800585a:	8952      	ldrh	r2, [r2, #10]
 800585c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <find_volume+0x2cc>
 8005868:	230d      	movs	r3, #13
 800586a:	e0dd      	b.n	8005a28 <find_volume+0x484>
 800586c:	20000044 	.word	0x20000044
		fmt = FS_FAT32;
 8005870:	2303      	movs	r3, #3
 8005872:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800587c:	4293      	cmp	r3, r2
 800587e:	d802      	bhi.n	8005886 <find_volume+0x2e2>
 8005880:	2302      	movs	r3, #2
 8005882:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	f640 72f5 	movw	r2, #4085	; 0xff5
 800588c:	4293      	cmp	r3, r2
 800588e:	d802      	bhi.n	8005896 <find_volume+0x2f2>
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	1c9a      	adds	r2, r3, #2
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058a2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80058a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a8:	441a      	add	r2, r3
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80058ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	441a      	add	r2, r3
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80058b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d11e      	bne.n	80058fe <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	3330      	adds	r3, #48	; 0x30
 80058c4:	332a      	adds	r3, #42	; 0x2a
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fc4e 	bl	8004168 <ld_word>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <find_volume+0x332>
 80058d2:	230d      	movs	r3, #13
 80058d4:	e0a8      	b.n	8005a28 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	891b      	ldrh	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <find_volume+0x33e>
 80058de:	230d      	movs	r3, #13
 80058e0:	e0a2      	b.n	8005a28 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	3330      	adds	r3, #48	; 0x30
 80058e6:	332c      	adds	r3, #44	; 0x2c
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe fc55 	bl	8004198 <ld_dword>
 80058ee:	4602      	mov	r2, r0
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	647b      	str	r3, [r7, #68]	; 0x44
 80058fc:	e01f      	b.n	800593e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	891b      	ldrh	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <find_volume+0x366>
 8005906:	230d      	movs	r3, #13
 8005908:	e08e      	b.n	8005a28 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005910:	441a      	add	r2, r3
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005916:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800591a:	2b02      	cmp	r3, #2
 800591c:	d103      	bne.n	8005926 <find_volume+0x382>
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	e00a      	b.n	800593c <find_volume+0x398>
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	4613      	mov	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4413      	add	r3, r2
 8005930:	085a      	lsrs	r2, r3, #1
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800593c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005944:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005948:	0a5b      	lsrs	r3, r3, #9
 800594a:	429a      	cmp	r2, r3
 800594c:	d201      	bcs.n	8005952 <find_volume+0x3ae>
 800594e:	230d      	movs	r3, #13
 8005950:	e06a      	b.n	8005a28 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f04f 32ff 	mov.w	r2, #4294967295
 8005958:	611a      	str	r2, [r3, #16]
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	2280      	movs	r2, #128	; 0x80
 8005966:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800596c:	2b03      	cmp	r3, #3
 800596e:	d149      	bne.n	8005a04 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	3330      	adds	r3, #48	; 0x30
 8005974:	3330      	adds	r3, #48	; 0x30
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fbf6 	bl	8004168 <ld_word>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d140      	bne.n	8005a04 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005984:	3301      	adds	r3, #1
 8005986:	4619      	mov	r1, r3
 8005988:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800598a:	f7fe fe9d 	bl	80046c8 <move_window>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d137      	bne.n	8005a04 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	2200      	movs	r2, #0
 8005998:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	3330      	adds	r3, #48	; 0x30
 800599e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fbe0 	bl	8004168 <ld_word>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d127      	bne.n	8005a04 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	3330      	adds	r3, #48	; 0x30
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe fbed 	bl	8004198 <ld_dword>
 80059be:	4603      	mov	r3, r0
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <find_volume+0x48c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d11e      	bne.n	8005a04 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	3330      	adds	r3, #48	; 0x30
 80059ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fbe2 	bl	8004198 <ld_dword>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <find_volume+0x490>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d113      	bne.n	8005a04 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	3330      	adds	r3, #48	; 0x30
 80059e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fe fbd7 	bl	8004198 <ld_dword>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	3330      	adds	r3, #48	; 0x30
 80059f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe fbcd 	bl	8004198 <ld_dword>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005a0a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <find_volume+0x494>)
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <find_volume+0x494>)
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <find_volume+0x494>)
 8005a1a:	881a      	ldrh	r2, [r3, #0]
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005a20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a22:	f7fe fde9 	bl	80045f8 <clear_lock>
#endif
	return FR_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3758      	adds	r7, #88	; 0x58
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	41615252 	.word	0x41615252
 8005a34:	61417272 	.word	0x61417272
 8005a38:	20000048 	.word	0x20000048

08005a3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005a46:	2309      	movs	r3, #9
 8005a48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01c      	beq.n	8005a8a <validate+0x4e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d018      	beq.n	8005a8a <validate+0x4e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d013      	beq.n	8005a8a <validate+0x4e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	889a      	ldrh	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	88db      	ldrh	r3, [r3, #6]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d10c      	bne.n	8005a8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe fad8 	bl	800402c <disk_status>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <validate+0x4e>
			res = FR_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <validate+0x5a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	e000      	b.n	8005a98 <validate+0x5c>
 8005a96:	2300      	movs	r3, #0
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	6013      	str	r3, [r2, #0]
	return res;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005aba:	f107 0310 	add.w	r3, r7, #16
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fcd5 	bl	800546e <get_ldnumber>
 8005ac4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da01      	bge.n	8005ad0 <f_mount+0x28>
 8005acc:	230b      	movs	r3, #11
 8005ace:	e02b      	b.n	8005b28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005ad0:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <f_mount+0x88>)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005ae0:	69b8      	ldr	r0, [r7, #24]
 8005ae2:	f7fe fd89 	bl	80045f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	490d      	ldr	r1, [pc, #52]	; (8005b30 <f_mount+0x88>)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <f_mount+0x66>
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d001      	beq.n	8005b12 <f_mount+0x6a>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e00a      	b.n	8005b28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005b12:	f107 010c 	add.w	r1, r7, #12
 8005b16:	f107 0308 	add.w	r3, r7, #8
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff fd41 	bl	80055a4 <find_volume>
 8005b22:	4603      	mov	r3, r0
 8005b24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20000044 	.word	0x20000044

08005b34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b098      	sub	sp, #96	; 0x60
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <f_open+0x18>
 8005b48:	2309      	movs	r3, #9
 8005b4a:	e1ad      	b.n	8005ea8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005b54:	79fa      	ldrb	r2, [r7, #7]
 8005b56:	f107 0110 	add.w	r1, r7, #16
 8005b5a:	f107 0308 	add.w	r3, r7, #8
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fd20 	bl	80055a4 <find_volume>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 8191 	bne.w	8005e96 <f_open+0x362>
		dj.obj.fs = fs;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	f107 0314 	add.w	r3, r7, #20
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fc03 	bl	800538c <follow_path>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005b8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11a      	bne.n	8005bca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005b94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da03      	bge.n	8005ba6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005ba4:	e011      	b.n	8005bca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	bf14      	ite	ne
 8005bb0:	2301      	movne	r3, #1
 8005bb2:	2300      	moveq	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fbd2 	bl	8004368 <chk_lock>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	f003 031c 	and.w	r3, r3, #28
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d07f      	beq.n	8005cd4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d017      	beq.n	8005c0c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d10e      	bne.n	8005c02 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005be4:	f7fe fc1c 	bl	8004420 <enq_lock>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <f_open+0xc8>
 8005bee:	f107 0314 	add.w	r3, r7, #20
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fb03 	bl	80051fe <dir_register>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	e000      	b.n	8005bfe <f_open+0xca>
 8005bfc:	2312      	movs	r3, #18
 8005bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	f043 0308 	orr.w	r3, r3, #8
 8005c08:	71fb      	strb	r3, [r7, #7]
 8005c0a:	e010      	b.n	8005c2e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005c0c:	7ebb      	ldrb	r3, [r7, #26]
 8005c0e:	f003 0311 	and.w	r3, r3, #17
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <f_open+0xea>
					res = FR_DENIED;
 8005c16:	2307      	movs	r3, #7
 8005c18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005c1c:	e007      	b.n	8005c2e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <f_open+0xfa>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d168      	bne.n	8005d08 <f_open+0x1d4>
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d063      	beq.n	8005d08 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005c40:	f7fd fcb8 	bl	80035b4 <get_fattime>
 8005c44:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	330e      	adds	r3, #14
 8005c4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe fae1 	bl	8004214 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	3316      	adds	r3, #22
 8005c56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe fadb 	bl	8004214 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	330b      	adds	r3, #11
 8005c62:	2220      	movs	r2, #32
 8005c64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fa32 	bl	80050d6 <ld_clust>
 8005c72:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c78:	2200      	movs	r2, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fa4a 	bl	8005114 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	331c      	adds	r3, #28
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fac4 	bl	8004214 <st_dword>
					fs->wflag = 1;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d037      	beq.n	8005d08 <f_open+0x1d4>
						dw = fs->winsect;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005c9e:	f107 0314 	add.w	r3, r7, #20
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe ff5d 	bl	8004b66 <remove_chain>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d126      	bne.n	8005d08 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fd02 	bl	80046c8 <move_window>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cce:	3a01      	subs	r2, #1
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	e019      	b.n	8005d08 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d115      	bne.n	8005d08 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005cdc:	7ebb      	ldrb	r3, [r7, #26]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <f_open+0x1ba>
					res = FR_NO_FILE;
 8005ce6:	2304      	movs	r3, #4
 8005ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005cec:	e00c      	b.n	8005d08 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <f_open+0x1d4>
 8005cf8:	7ebb      	ldrb	r3, [r7, #26]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <f_open+0x1d4>
						res = FR_DENIED;
 8005d02:	2307      	movs	r3, #7
 8005d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d128      	bne.n	8005d62 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bf14      	ite	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	2300      	moveq	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	f107 0314 	add.w	r3, r7, #20
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fe fb8b 	bl	8004464 <inc_lock>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <f_open+0x22e>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 8095 	bne.w	8005e96 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff f9af 	bl	80050d6 <ld_clust>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	331c      	adds	r3, #28
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fa08 	bl	8004198 <ld_dword>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	88da      	ldrh	r2, [r3, #6]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	79fa      	ldrb	r2, [r7, #7]
 8005da6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3330      	adds	r3, #48	; 0x30
 8005dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe fa72 	bl	80042ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d060      	beq.n	8005e96 <f_open+0x362>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d05c      	beq.n	8005e96 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	895b      	ldrh	r3, [r3, #10]
 8005de8:	025b      	lsls	r3, r3, #9
 8005dea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	657b      	str	r3, [r7, #84]	; 0x54
 8005df8:	e016      	b.n	8005e28 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fd1d 	bl	800483e <get_fat>
 8005e04:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d802      	bhi.n	8005e12 <f_open+0x2de>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d102      	bne.n	8005e20 <f_open+0x2ec>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005e20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	657b      	str	r3, [r7, #84]	; 0x54
 8005e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <f_open+0x304>
 8005e30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d8e0      	bhi.n	8005dfa <f_open+0x2c6>
				}
				fp->clust = clst;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e3c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d127      	bne.n	8005e96 <f_open+0x362>
 8005e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d022      	beq.n	8005e96 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe fcd3 	bl	8004800 <clust2sect>
 8005e5a:	6478      	str	r0, [r7, #68]	; 0x44
 8005e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <f_open+0x336>
						res = FR_INT_ERR;
 8005e62:	2302      	movs	r3, #2
 8005e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e68:	e015      	b.n	8005e96 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6c:	0a5a      	lsrs	r2, r3, #9
 8005e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	7858      	ldrb	r0, [r3, #1]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	2301      	movs	r3, #1
 8005e86:	f7fe f911 	bl	80040ac <disk_read>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <f_open+0x362>
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005e96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <f_open+0x370>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3760      	adds	r7, #96	; 0x60
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	; 0x38
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f107 0214 	add.w	r2, r7, #20
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fdb3 	bl	8005a3c <validate>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d107      	bne.n	8005ef4 <f_read+0x44>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	7d5b      	ldrb	r3, [r3, #21]
 8005ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <f_read+0x4a>
 8005ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ef8:	e115      	b.n	8006126 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	7d1b      	ldrb	r3, [r3, #20]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <f_read+0x5a>
 8005f06:	2307      	movs	r3, #7
 8005f08:	e10d      	b.n	8006126 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	f240 80fe 	bls.w	800611c <f_read+0x26c>
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005f24:	e0fa      	b.n	800611c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 80c6 	bne.w	80060c0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	0a5b      	lsrs	r3, r3, #9
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	8952      	ldrh	r2, [r2, #10]
 8005f3e:	3a01      	subs	r2, #1
 8005f40:	4013      	ands	r3, r2
 8005f42:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d12f      	bne.n	8005faa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	633b      	str	r3, [r7, #48]	; 0x30
 8005f58:	e013      	b.n	8005f82 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	4619      	mov	r1, r3
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7fe fef9 	bl	8004d60 <clmt_clust>
 8005f6e:	6338      	str	r0, [r7, #48]	; 0x30
 8005f70:	e007      	b.n	8005f82 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f7fe fc5f 	bl	800483e <get_fat>
 8005f80:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d804      	bhi.n	8005f92 <f_read+0xe2>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	755a      	strb	r2, [r3, #21]
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e0c9      	b.n	8006126 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d104      	bne.n	8005fa4 <f_read+0xf4>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	755a      	strb	r2, [r3, #21]
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0c0      	b.n	8006126 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f7fe fc24 	bl	8004800 <clust2sect>
 8005fb8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <f_read+0x11a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	755a      	strb	r2, [r3, #21]
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e0ad      	b.n	8006126 <f_read+0x276>
			sect += csect;
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	0a5b      	lsrs	r3, r3, #9
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d039      	beq.n	8006052 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	4413      	add	r3, r2
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	8952      	ldrh	r2, [r2, #10]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d905      	bls.n	8005ff8 <f_read+0x148>
					cc = fs->csize - csect;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	895b      	ldrh	r3, [r3, #10]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	7858      	ldrb	r0, [r3, #1]
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006002:	f7fe f853 	bl	80040ac <disk_read>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d004      	beq.n	8006016 <f_read+0x166>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	755a      	strb	r2, [r3, #21]
 8006012:	2301      	movs	r3, #1
 8006014:	e087      	b.n	8006126 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	7d1b      	ldrb	r3, [r3, #20]
 800601a:	b25b      	sxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	da14      	bge.n	800604a <f_read+0x19a>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602a:	429a      	cmp	r2, r3
 800602c:	d90d      	bls.n	800604a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	025b      	lsls	r3, r3, #9
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	18d0      	adds	r0, r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3330      	adds	r3, #48	; 0x30
 8006040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006044:	4619      	mov	r1, r3
 8006046:	f7fe f911 	bl	800426c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	025b      	lsls	r3, r3, #9
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006050:	e050      	b.n	80060f4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	429a      	cmp	r2, r3
 800605a:	d02e      	beq.n	80060ba <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	7d1b      	ldrb	r3, [r3, #20]
 8006060:	b25b      	sxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	da18      	bge.n	8006098 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	7858      	ldrb	r0, [r3, #1]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	2301      	movs	r3, #1
 8006076:	f7fe f839 	bl	80040ec <disk_write>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <f_read+0x1da>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	755a      	strb	r2, [r3, #21]
 8006086:	2301      	movs	r3, #1
 8006088:	e04d      	b.n	8006126 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	7d1b      	ldrb	r3, [r3, #20]
 800608e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006092:	b2da      	uxtb	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	7858      	ldrb	r0, [r3, #1]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060a2:	2301      	movs	r3, #1
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	f7fe f801 	bl	80040ac <disk_read>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <f_read+0x20a>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	755a      	strb	r2, [r3, #21]
 80060b6:	2301      	movs	r3, #1
 80060b8:	e035      	b.n	8006126 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80060ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d901      	bls.n	80060da <f_read+0x22a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e8:	4413      	add	r3, r2
 80060ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ec:	4619      	mov	r1, r3
 80060ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060f0:	f7fe f8bc 	bl	800426c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80060f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	4413      	add	r3, r2
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	441a      	add	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	619a      	str	r2, [r3, #24]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	441a      	add	r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f47f af01 	bne.w	8005f26 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3738      	adds	r7, #56	; 0x38
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b08c      	sub	sp, #48	; 0x30
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f107 0210 	add.w	r2, r7, #16
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fc74 	bl	8005a3c <validate>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800615a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800615e:	2b00      	cmp	r3, #0
 8006160:	d107      	bne.n	8006172 <f_write+0x44>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	7d5b      	ldrb	r3, [r3, #21]
 8006166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800616a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <f_write+0x4a>
 8006172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006176:	e14b      	b.n	8006410 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	7d1b      	ldrb	r3, [r3, #20]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <f_write+0x5a>
 8006184:	2307      	movs	r3, #7
 8006186:	e143      	b.n	8006410 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	441a      	add	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	429a      	cmp	r2, r3
 8006196:	f080 812d 	bcs.w	80063f4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	43db      	mvns	r3, r3
 80061a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80061a2:	e127      	b.n	80063f4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 80e3 	bne.w	8006378 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	8952      	ldrh	r2, [r2, #10]
 80061bc:	3a01      	subs	r2, #1
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d143      	bne.n	8006250 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10c      	bne.n	80061ea <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11a      	bne.n	8006212 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe fd25 	bl	8004c30 <create_chain>
 80061e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80061e8:	e013      	b.n	8006212 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	4619      	mov	r1, r3
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f7fe fdb1 	bl	8004d60 <clmt_clust>
 80061fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8006200:	e007      	b.n	8006212 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f7fe fd10 	bl	8004c30 <create_chain>
 8006210:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80f2 	beq.w	80063fe <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	2b01      	cmp	r3, #1
 800621e:	d104      	bne.n	800622a <f_write+0xfc>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2202      	movs	r2, #2
 8006224:	755a      	strb	r2, [r3, #21]
 8006226:	2302      	movs	r3, #2
 8006228:	e0f2      	b.n	8006410 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006230:	d104      	bne.n	800623c <f_write+0x10e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	755a      	strb	r2, [r3, #21]
 8006238:	2301      	movs	r3, #1
 800623a:	e0e9      	b.n	8006410 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006240:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <f_write+0x122>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800624e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	7d1b      	ldrb	r3, [r3, #20]
 8006254:	b25b      	sxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	da18      	bge.n	800628c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	7858      	ldrb	r0, [r3, #1]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1a      	ldr	r2, [r3, #32]
 8006268:	2301      	movs	r3, #1
 800626a:	f7fd ff3f 	bl	80040ec <disk_write>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <f_write+0x150>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	755a      	strb	r2, [r3, #21]
 800627a:	2301      	movs	r3, #1
 800627c:	e0c8      	b.n	8006410 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	7d1b      	ldrb	r3, [r3, #20]
 8006282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7fe fab3 	bl	8004800 <clust2sect>
 800629a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d104      	bne.n	80062ac <f_write+0x17e>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2202      	movs	r2, #2
 80062a6:	755a      	strb	r2, [r3, #21]
 80062a8:	2302      	movs	r3, #2
 80062aa:	e0b1      	b.n	8006410 <f_write+0x2e2>
			sect += csect;
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	4413      	add	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0a5b      	lsrs	r3, r3, #9
 80062b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d03c      	beq.n	800633a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	4413      	add	r3, r2
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	8952      	ldrh	r2, [r2, #10]
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d905      	bls.n	80062da <f_write+0x1ac>
					cc = fs->csize - csect;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	895b      	ldrh	r3, [r3, #10]
 80062d2:	461a      	mov	r2, r3
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	7858      	ldrb	r0, [r3, #1]
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	69f9      	ldr	r1, [r7, #28]
 80062e4:	f7fd ff02 	bl	80040ec <disk_write>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <f_write+0x1ca>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	755a      	strb	r2, [r3, #21]
 80062f4:	2301      	movs	r3, #1
 80062f6:	e08b      	b.n	8006410 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	429a      	cmp	r2, r3
 8006304:	d915      	bls.n	8006332 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1a      	ldr	r2, [r3, #32]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631e:	4619      	mov	r1, r3
 8006320:	f7fd ffa4 	bl	800426c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	7d1b      	ldrb	r3, [r3, #20]
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	025b      	lsls	r3, r3, #9
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006338:	e03f      	b.n	80063ba <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	429a      	cmp	r2, r3
 8006342:	d016      	beq.n	8006372 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800634c:	429a      	cmp	r2, r3
 800634e:	d210      	bcs.n	8006372 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	7858      	ldrb	r0, [r3, #1]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800635a:	2301      	movs	r3, #1
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	f7fd fea5 	bl	80040ac <disk_read>
 8006362:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	755a      	strb	r2, [r3, #21]
 800636e:	2301      	movs	r3, #1
 8006370:	e04e      	b.n	8006410 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006380:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	429a      	cmp	r2, r3
 800638c:	d901      	bls.n	8006392 <f_write+0x264>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a0:	4413      	add	r3, r2
 80063a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fd ff60 	bl	800426c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	7d1b      	ldrb	r3, [r3, #20]
 80063b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	4413      	add	r3, r2
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	441a      	add	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	619a      	str	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	bf38      	it	cc
 80063da:	461a      	movcc	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	441a      	add	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f47f aed4 	bne.w	80061a4 <f_write+0x76>
 80063fc:	e000      	b.n	8006400 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80063fe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	7d1b      	ldrb	r3, [r3, #20]
 8006404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3730      	adds	r7, #48	; 0x30
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f107 0208 	add.w	r2, r7, #8
 8006426:	4611      	mov	r1, r2
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff fb07 	bl	8005a3c <validate>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d168      	bne.n	800650a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7d1b      	ldrb	r3, [r3, #20]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d062      	beq.n	800650a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	7d1b      	ldrb	r3, [r3, #20]
 8006448:	b25b      	sxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	da15      	bge.n	800647a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7858      	ldrb	r0, [r3, #1]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	2301      	movs	r3, #1
 800645e:	f7fd fe45 	bl	80040ec <disk_write>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <f_sync+0x54>
 8006468:	2301      	movs	r3, #1
 800646a:	e04f      	b.n	800650c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	7d1b      	ldrb	r3, [r3, #20]
 8006470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006474:	b2da      	uxtb	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800647a:	f7fd f89b 	bl	80035b4 <get_fattime>
 800647e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f7fe f91d 	bl	80046c8 <move_window>
 800648e:	4603      	mov	r3, r0
 8006490:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d138      	bne.n	800650a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	330b      	adds	r3, #11
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	330b      	adds	r3, #11
 80064a8:	f042 0220 	orr.w	r2, r2, #32
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	461a      	mov	r2, r3
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	f7fe fe2a 	bl	8005114 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f103 021c 	add.w	r2, r3, #28
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f7fd fea1 	bl	8004214 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3316      	adds	r3, #22
 80064d6:	6939      	ldr	r1, [r7, #16]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd fe9b 	bl	8004214 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3312      	adds	r3, #18
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fd fe7a 	bl	80041de <st_word>
					fs->wflag = 1;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2201      	movs	r2, #1
 80064ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe f916 	bl	8004724 <sync_fs>
 80064f8:	4603      	mov	r3, r0
 80064fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7d1b      	ldrb	r3, [r3, #20]
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	b2da      	uxtb	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800650a:	7dfb      	ldrb	r3, [r7, #23]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff ff7b 	bl	8006418 <f_sync>
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d118      	bne.n	800655e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f107 0208 	add.w	r2, r7, #8
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fa81 	bl	8005a3c <validate>
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10c      	bne.n	800655e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe f819 	bl	8004580 <dec_lock>
 800654e:	4603      	mov	r3, r0
 8006550:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b092      	sub	sp, #72	; 0x48
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006574:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006578:	f107 030c 	add.w	r3, r7, #12
 800657c:	2200      	movs	r2, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff f810 	bl	80055a4 <find_volume>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800658a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 8099 	bne.w	80066c6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	3b02      	subs	r3, #2
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d804      	bhi.n	80065b2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e089      	b.n	80066c6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d128      	bne.n	8006610 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80065be:	2302      	movs	r3, #2
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe f936 	bl	800483e <get_fat>
 80065d2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d103      	bne.n	80065e4 <f_getfree+0x7c>
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80065e2:	e063      	b.n	80066ac <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d103      	bne.n	80065f2 <f_getfree+0x8a>
 80065ea:	2302      	movs	r3, #2
 80065ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80065f0:	e05c      	b.n	80066ac <f_getfree+0x144>
					if (stat == 0) nfree++;
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <f_getfree+0x96>
 80065f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fa:	3301      	adds	r3, #1
 80065fc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80065fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006600:	3301      	adds	r3, #1
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800660a:	429a      	cmp	r2, r3
 800660c:	d3db      	bcc.n	80065c6 <f_getfree+0x5e>
 800660e:	e04d      	b.n	80066ac <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
 8006620:	2300      	movs	r3, #0
 8006622:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	2b00      	cmp	r3, #0
 8006628:	d113      	bne.n	8006652 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800662a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	63ba      	str	r2, [r7, #56]	; 0x38
 8006632:	4619      	mov	r1, r3
 8006634:	f7fe f848 	bl	80046c8 <move_window>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800663e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006642:	2b00      	cmp	r3, #0
 8006644:	d131      	bne.n	80066aa <f_getfree+0x142>
							p = fs->win;
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	3330      	adds	r3, #48	; 0x30
 800664a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800664c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d10f      	bne.n	800667a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800665a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800665c:	f7fd fd84 	bl	8004168 <ld_word>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <f_getfree+0x104>
 8006666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006668:	3301      	adds	r3, #1
 800666a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	3302      	adds	r3, #2
 8006670:	633b      	str	r3, [r7, #48]	; 0x30
 8006672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006674:	3b02      	subs	r3, #2
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
 8006678:	e010      	b.n	800669c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800667a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800667c:	f7fd fd8c 	bl	8004198 <ld_dword>
 8006680:	4603      	mov	r3, r0
 8006682:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d102      	bne.n	8006690 <f_getfree+0x128>
 800668a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668c:	3301      	adds	r3, #1
 800668e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	3304      	adds	r3, #4
 8006694:	633b      	str	r3, [r7, #48]	; 0x30
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006698:	3b04      	subs	r3, #4
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669e:	3b01      	subs	r3, #1
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1bd      	bne.n	8006624 <f_getfree+0xbc>
 80066a8:	e000      	b.n	80066ac <f_getfree+0x144>
							if (res != FR_OK) break;
 80066aa:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	791a      	ldrb	r2, [r3, #4]
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80066c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3748      	adds	r7, #72	; 0x48
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b088      	sub	sp, #32
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
	int n = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80066e6:	e01b      	b.n	8006720 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80066e8:	f107 0310 	add.w	r3, r7, #16
 80066ec:	f107 0114 	add.w	r1, r7, #20
 80066f0:	2201      	movs	r2, #1
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff fbdc 	bl	8005eb0 <f_read>
		if (rc != 1) break;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d116      	bne.n	800672c <f_gets+0x5a>
		c = s[0];
 80066fe:	7d3b      	ldrb	r3, [r7, #20]
 8006700:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	2b0d      	cmp	r3, #13
 8006706:	d100      	bne.n	800670a <f_gets+0x38>
 8006708:	e00a      	b.n	8006720 <f_gets+0x4e>
		*p++ = c;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	61ba      	str	r2, [r7, #24]
 8006710:	7dfa      	ldrb	r2, [r7, #23]
 8006712:	701a      	strb	r2, [r3, #0]
		n++;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	3301      	adds	r3, #1
 8006718:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	2b0a      	cmp	r3, #10
 800671e:	d007      	beq.n	8006730 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3b01      	subs	r3, #1
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	429a      	cmp	r2, r3
 8006728:	dbde      	blt.n	80066e8 <f_gets+0x16>
 800672a:	e002      	b.n	8006732 <f_gets+0x60>
		if (rc != 1) break;
 800672c:	bf00      	nop
 800672e:	e000      	b.n	8006732 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006730:	bf00      	nop
	}
	*p = 0;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <f_gets+0x70>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	e000      	b.n	8006744 <f_gets+0x72>
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800675a:	2301      	movs	r3, #1
 800675c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006762:	4b1f      	ldr	r3, [pc, #124]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 8006764:	7a5b      	ldrb	r3, [r3, #9]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d131      	bne.n	80067d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800676c:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 800676e:	7a5b      	ldrb	r3, [r3, #9]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 8006776:	2100      	movs	r1, #0
 8006778:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800677a:	4b19      	ldr	r3, [pc, #100]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 800677c:	7a5b      	ldrb	r3, [r3, #9]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	4a17      	ldr	r2, [pc, #92]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800678a:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 800678c:	7a5b      	ldrb	r3, [r3, #9]
 800678e:	b2db      	uxtb	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 8006794:	4413      	add	r3, r2
 8006796:	79fa      	ldrb	r2, [r7, #7]
 8006798:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 800679c:	7a5b      	ldrb	r3, [r3, #9]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	b2d1      	uxtb	r1, r2
 80067a4:	4a0e      	ldr	r2, [pc, #56]	; (80067e0 <FATFS_LinkDriverEx+0x94>)
 80067a6:	7251      	strb	r1, [r2, #9]
 80067a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80067aa:	7dbb      	ldrb	r3, [r7, #22]
 80067ac:	3330      	adds	r3, #48	; 0x30
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	3301      	adds	r3, #1
 80067b8:	223a      	movs	r2, #58	; 0x3a
 80067ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	3302      	adds	r3, #2
 80067c0:	222f      	movs	r2, #47	; 0x2f
 80067c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	3303      	adds	r3, #3
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	2000006c 	.word	0x2000006c

080067e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80067ee:	2200      	movs	r2, #0
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ffaa 	bl	800674c <FATFS_LinkDriverEx>
 80067f8:	4603      	mov	r3, r0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <__libc_init_array>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	4d0d      	ldr	r5, [pc, #52]	; (800683c <__libc_init_array+0x38>)
 8006808:	4c0d      	ldr	r4, [pc, #52]	; (8006840 <__libc_init_array+0x3c>)
 800680a:	1b64      	subs	r4, r4, r5
 800680c:	10a4      	asrs	r4, r4, #2
 800680e:	2600      	movs	r6, #0
 8006810:	42a6      	cmp	r6, r4
 8006812:	d109      	bne.n	8006828 <__libc_init_array+0x24>
 8006814:	4d0b      	ldr	r5, [pc, #44]	; (8006844 <__libc_init_array+0x40>)
 8006816:	4c0c      	ldr	r4, [pc, #48]	; (8006848 <__libc_init_array+0x44>)
 8006818:	f000 f820 	bl	800685c <_init>
 800681c:	1b64      	subs	r4, r4, r5
 800681e:	10a4      	asrs	r4, r4, #2
 8006820:	2600      	movs	r6, #0
 8006822:	42a6      	cmp	r6, r4
 8006824:	d105      	bne.n	8006832 <__libc_init_array+0x2e>
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	f855 3b04 	ldr.w	r3, [r5], #4
 800682c:	4798      	blx	r3
 800682e:	3601      	adds	r6, #1
 8006830:	e7ee      	b.n	8006810 <__libc_init_array+0xc>
 8006832:	f855 3b04 	ldr.w	r3, [r5], #4
 8006836:	4798      	blx	r3
 8006838:	3601      	adds	r6, #1
 800683a:	e7f2      	b.n	8006822 <__libc_init_array+0x1e>
 800683c:	080069b8 	.word	0x080069b8
 8006840:	080069b8 	.word	0x080069b8
 8006844:	080069b8 	.word	0x080069b8
 8006848:	080069bc 	.word	0x080069bc

0800684c <memset>:
 800684c:	4402      	add	r2, r0
 800684e:	4603      	mov	r3, r0
 8006850:	4293      	cmp	r3, r2
 8006852:	d100      	bne.n	8006856 <memset+0xa>
 8006854:	4770      	bx	lr
 8006856:	f803 1b01 	strb.w	r1, [r3], #1
 800685a:	e7f9      	b.n	8006850 <memset+0x4>

0800685c <_init>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr

08006868 <_fini>:
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	bf00      	nop
 800686c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686e:	bc08      	pop	{r3}
 8006870:	469e      	mov	lr, r3
 8006872:	4770      	bx	lr
